<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClrPlus.Core</name>
    </assembly>
    <members>
        <member name="M:ClrPlus.Core.Collections.AbstractDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <exception cref="T:System.IndexOutOfRangeException">Not enough room in target array.</exception>
        </member>
        <member name="T:ClrPlus.Core.Collections.IOrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:ClrPlus.Core.Collections.IOrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>
            <para>You can also use the <see cref="P:System.Collections.Generic.IDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see></exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:ClrPlus.Core.Collections.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="P:ClrPlus.Core.Collections.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
        </member>
        <member name="T:ClrPlus.Core.Collections.InternalDictionary`2">
            <remarks>
                Needed because this indexer of System.Collections.Generic.DictionaryTKeyTValue is not virtual.
            </remarks>
        </member>
        <member name="T:ClrPlus.Core.Collections.CacheEnumerable`1">
            <summary>
                This IEnumerable Wrapper will cache the results incrementally on first use of the source collection
                into a List, so that subsequent uses of the collection are pulled from the list.
                (and it doesn't need to iterate thru the whole collection first, like ToList() )
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ClrPlus.Core.Collections.ObservableList`1">
            <summary>
            List that fires events when items are changed
            </summary>
            <typeparam name="T">Type of list items</typeparam>
        </member>
        <member name="E:ClrPlus.Core.Collections.ObservableList`1.ListChanged">
            <summary>
            Fired whenever list item has been changed, added or removed or when list has been cleared
            </summary>
        </member>
        <member name="E:ClrPlus.Core.Collections.ObservableList`1.ItemRemoved">
            <summary>
            Fired when list item has been removed from the list
            </summary>
        </member>
        <member name="E:ClrPlus.Core.Collections.ObservableList`1.ItemAdded">
            <summary>
            Fired when item has been added to the list
            </summary>
        </member>
        <member name="E:ClrPlus.Core.Collections.ObservableList`1.ListCleared">
            <summary>
            Fired when list is cleared
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Collections.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity and comparer.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.ConvertToKeyType(System.Object)">
            <summary>
            Converts the object passed as a key to the key type of the dictionary
            </summary>
            <param name="keyObject">The key object to check</param>
            <returns>The key object, cast as the key type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyObject"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="keyObject"/>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.ConvertToValueType(System.Object)">
            <summary>
            Converts the object passed as a value to the value type of the dictionary
            </summary>
            <param name="value">The object to convert to the value type of the dictionary</param>
            <returns>The value object, converted to the value type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <null/>, and the value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:ClrPlus.Core.Collections.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts a new entry into the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:ClrPlus.Core.Collections.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.<br/>
            -or-<br/>
            An element with the same key already exists in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the specified index from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="index">The zero-based index of the entry to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ClrPlus.Core.Collections.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <remarks>The capacity is not changed as a result of calling this method.</remarks>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.</exception>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>
            </summary>
            <param name="key">The key to locate in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></param>
            <returns>The zero-based index of <paramref name="key"/>, if <paramref name="key"/> is found in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, -1</returns>
            <remarks>This method performs a linear search; therefore it has a cost of O(n) at worst.</remarks>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns><see langword="true"/> if the key was found and the corresponding element was removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> elements to a one-dimensional Array object at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> object that is the destination of the <see cref="T:KeyValuePair`2&gt;"/> objects copied from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>The <see cref="M:CopyTo"/> method preserves the order of the elements in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></remarks>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of <paramref name="value"/>. This parameter can be passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> with the specified key.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to add to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains a specific key and value.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure to locate in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> to an array of type <see cref="T:KeyValuePair`2&gt;"/>, starting at the specified index.
            </summary>
            <param name="array">The one-dimensional array of type <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> that is the destination of the <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> elements copied from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to remove from the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if the key and value represented by <paramref name="item"/> is successfully found and removed; otherwise, <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="item"/> is not found in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</returns>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.Dictionary">
            <summary>
            Gets the dictionary object that stores the keys and values
            </summary>
            <value>The dictionary object that stores the keys and values for the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the dictionary object if necessary</remarks>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.List">
            <summary>
            Gets the list object that stores the key/value pairs.
            </summary>
            <value>The list object that stores the key/value pairs for the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the list object if necessary.</remarks>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ClrPlus.Core.Collections.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:ClrPlus.Core.Collections.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference, and the value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size.
            </summary>
            <value><see langword="true"/> if the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection is read-only.
            </summary>
            <value><see langword="true"/> if the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is read-only; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
            <remarks>
            A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modification of the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the <see cref="T:System.Collections.ICollection"/> refers back to the values in the original <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection. Therefore, changes to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the <see cref="T:System.Collections.ICollection"/>.</remarks>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/values pairs contained in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>The number of key/value pairs contained in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object is synchronized (thread-safe).
            </summary>
            <value>This method always returns false.</value>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.</value>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:ClrPlus.Core.Collections.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:ICollection{TValue}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the values in the original <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:ClrPlus.Core.Collections.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the value collection.</remarks>
        </member>
        <member name="T:ClrPlus.Core.Collections.XDictionary`2">
            <summary>
                This behaves like a regular dictionary, except:
                - add operations will silently replace existing values the
                - inedexer [] will silently add values
                - Getting values will return default(TValue) instead of throwing on no element.
                - setting a value to default(TValue) removes the key
            </summary>
            <typeparam name="TKey"> </typeparam>
            <typeparam name="TValue"> </typeparam>
        </member>
        <member name="M:ClrPlus.Core.Collections.XDictionary`2.#ctor(`1)">
            <summary>
                Creates a new instance of Dictionary.
            </summary>
            <param name="defaultValue"> Default value to use when a requested key is not present in the collection. </param>
        </member>
        <member name="P:ClrPlus.Core.Collections.XDictionary`2.Default">
            <summary>
                Gets or sets the default value returned when a non-existing key is requested from the Dictionary.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Collections.XDictionary`2.Item(`0)">
            <summary>
                Gets or sets the value associated with the key.
            </summary>
            <param name="key"> Key into the collection. </param>
            <returns> Value associated with the key, or if the key is not a part of the collection, then the value specified by the Default property. </returns>
        </member>
        <member name="T:ClrPlus.Core.Configuration.RegistryView">
            <summary>
                A simplified view into the registry
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._classesRoot">
            <summary>
                Backing field for ClassesRoot
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._system">
            <summary>
                Backing field for System
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._user">
            <summary>
                Backing field for User
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._coappSystem">
            <summary>
                Backing field for CoAppSystem
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._coappUser">
            <summary>
                Backing field for CoAppUser
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._applicationSystem">
            <summary>
                Backing field for ApplicationSystem
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._applicationUser">
            <summary>
                Backing field for Application User
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._serializer">
            <summary>
                Provides a JSON serializer for simple serialization tasks.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._rootKey">
            <summary>
                The current registry key that this object is a view into
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._subKey">
            <summary>
                the subkey below the root key
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Configuration.RegistryView._valueName">
            <summary>
                the registry value name
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Configuration.RegistryView.#ctor(Microsoft.Win32.RegistryKey)">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.Configuration.RegistryView"/> class. Sets the root to the given registry key, no subkey, no valuename
            </summary>
            <param name="rootKey"> The root key. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Configuration.RegistryView.#ctor(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.Configuration.RegistryView"/> class. Sets the root to the given registry key, uses the given string to set the subkey and valuename (subkey and valuename are delimited by the first hash character (#) Ensures that the key doesn't start or end with backslashes Ensures that the valuename doesn't start or end with hashes
            </summary>
            <param name="rootKey"> The root key. </param>
            <param name="subKey"> The sub key. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Configuration.RegistryView.#ctor(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.Configuration.RegistryView"/> class. Sets the root to the given registry key, uses the given strings to set the subkey and valuename Ensures that the key doesn't start or end with backslashes Ensures that the valuename doesn't start or end with hashes
            </summary>
            <param name="rootKey"> The root key. </param>
            <param name="subKey"> The sub key. </param>
            <param name="valuename"> The valuename. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Configuration.RegistryView.GetEnumValue``1">
            <summary>
                Gets the value for this current node as an enum. Defaults to the enum's Default Value if parsing fails.
            </summary>
            <returns> the enum value of the node </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Configuration.RegistryView.SetEnumValue``1(``0)">
            <summary>
                Sets the value of the node to the textual represnentation of the enum
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="value"> The value to set the node to. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Configuration.RegistryView.DeleteSubkey(System.String)">
            <summary>
                Attempts to deletes the subkey. Silently fails without warning.
            </summary>
            <param name="subkey"> The subkey. </param>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.System">
            <summary>
                Gets the View for the HKLM registry hive.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.User">
            <summary>
                Gets the View for the HKCU registry hive.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.CoAppSystem">
            <summary>
                Gets the View for the HKLM\Software\CoApp registry node. Used for apps to have system-level data for CoApp Applications
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.CoAppUser">
            <summary>
                Gets the View for the HKCU\Software\CoApp registry node. Used for apps to have user-specific data for CoApp Applications
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.ApplicationSystem">
            <summary>
                Gets the system-level, application specific Registry View. Appends the Application Name to the Registry Key
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.ApplicationUser">
            <summary>
                Gets the user-specific, application specific Registry View. Appends the Application Name to the Registry Key
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.ClassesRoot">
            <summary>
                Gets the View for the HKCR registry hive.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.ReadableKey">
            <summary>
                Gets the RegistryKey used for reading values.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.WriteableKey">
            <summary>
                Gets the RegistryKey used for writing values.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.Subkeys">
            <summary>
                Gets the list of subkeys the current node contains.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.StringValue">
            <summary>
                Gets or sets the value for this current node (sets the default value for the key if the valuename isn't set). Treats the value as a string value (REG_SZ)
            </summary>
            <value> The string value. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.IntValue">
            <summary>
                Gets or sets the value for this current node (sets the default value for the key if the valuename isn't set). Treats the value as an Int32 value (REG_DWORD). Attempts to coerce any string value to an integer. Will truncate a Int64 value down to an Int32 value Defaults to 0
            </summary>
            <value> The value as an integer. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.LongValue">
            <summary>
                Gets or sets the value for this current node (sets the default value for the key if the valuename isn't set). Treats the value as an Int64 value (REG_DWORD). Attempts to coerce any string value to an Int64. Defaults to 0
            </summary>
            <value> The value as an Int64. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.EncryptedStringValue">
            <summary>
                Gets or sets the current node's value as an encrypted string (user-account encrypted for user values, machine-key encrypted for all others). Uses the DPAPI stuff way down deep.
            </summary>
            <value> The unencrypted string value. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.EncryptedStringsValue">
            <summary>
                Gets or sets the current node's value as an encrypted string (user-account encrypted for user values, machine-key encrypted for all others). Uses the DPAPI stuff way down deep.
            </summary>
            <value> The unencrypted string value. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.EncryptedBinaryValue">
            <summary>
                Gets or sets the current node's value as an encrypted string of bytes (user-account encrypted for user values, machine-key encrypted for all others). Uses the DPAPI stuff way down deep.
            </summary>
            <value> The unencrypted value as a collection of bytes. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.BoolValue">
            <summary>
                Gets or sets the current node's value as a boolean value. recognizes 'true' or '1' as true, everthing else is considered false.
            </summary>
            <value>
                <c>true</c> if the node value is 1 or 'true'; otherwise, <c>false</c> .
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.StringsValue">
            <summary>
                Gets or sets the current node as a collection of strings
            </summary>
            <value> The collection of strings. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.BinaryValue">
            <summary>
                Gets or sets the current node as a collection of bytes
            </summary>
            <value> The binary value. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.Value">
            <summary>
                Raw accessor to get or set the value of the key Chooses the type for the value based on the object passed in.
            </summary>
            <value> The value to set the node to. </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.Item(System.String,System.String)">
            <summary>
                Gets the <see cref="T:ClrPlus.Core.Configuration.RegistryView"/> with the specified key and value name.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Configuration.RegistryView.Item(System.String)">
            <summary>
                Gets the <see cref="T:ClrPlus.Core.Configuration.RegistryView"/> with the specified key and value name (seperatedby hash character).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:ClrPlus.Core.DynamicXml.DynamicAttributes">
            <summary>
                some summary
            </summary>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicAttributes.node">
            <summary>
                The node this object is fronting for.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicAttributes.#ctor(System.Xml.Linq.XElement)">
            <summary>
                Creates an Attribute handler for the given XML Node.
            </summary>
            <param name="node">the XML node</param>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicAttributes.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Returns the Attribute value
            </summary>
            <param name="binder">the Attribute Name</param>
            <param name="result">the return value (attribute value)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicAttributes.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
                Sets the attribute value
            </summary>
            <param name="binder">Attribute name</param>
            <param name="value">Value to set</param>
            <returns>True</returns>
        </member>
        <member name="T:ClrPlus.Core.DynamicXml.DynamicDataRow">
            <summary>
                A wrapper that creates a dynamic (untyped) accessor for data rows in a DataTable.
                Allows simplistic access to the data in a data row.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicDataRow._dataRow">
            <summary>
                the backing field for the actual data row.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataRow.#ctor(System.Data.DataRow)">
            <summary>
                Creates an instance that wraps a data row.
            </summary>
            <param name="dataRow">the row to wrap</param>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataRow.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Provides the implementation for operations that get member values.
                This method is used to specify dynamic behavior for operations such as getting a value for a property.
                This provides the ability to have a dynamic (untyped) access to a datarow field based on column name.
            </summary>
            <returns>
                true if the operation is successful; otherwise, false.
                If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
            <param name="binder">
                Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the
                <see
                    cref="T:System.Dynamic.DynamicObject" />
                class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="result">
                The result of the get operation. For example, if the method is called for a property, you can assign the property value to
                <paramref
                    name="result" />
                .
            </param>
        </member>
        <member name="T:ClrPlus.Core.DynamicXml.DynamicDataSet">
            <summary>
                A dynamic (untyped) wrapper for DataSet objects (a collection of tables)
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicDataSet._dataSet">
            <summary>
                the backing field for the dataset
            </summary>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicDataSet._cache">
            <summary>
                a cache collection to speed up the access of the tables in the dataset
            </summary>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataSet.#ctor(System.Data.DataSet)">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.DynamicXml.DynamicDataSet"/> class.
            </summary>
            <param name="dataSet">The data set.</param>
            <remarks></remarks>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataSet.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Provides the implementation for operations that get member values. Classes derived from the
                <see
                    cref="T:System.Dynamic.DynamicObject" />
                class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">
                Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the
                <see
                    cref="T:System.Dynamic.DynamicObject" />
                class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="result">
                The result of the get operation. For example, if the method is called for a property, you can assign the property value to
                <paramref
                    name="result" />
                .
            </param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
            <remarks>
                This gets the table for the given property name.
                This attempts to cache the table instance to speed up subsequent operations.
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicDataSet.Item(System.String)">
            <summary>
                A short-cut accessor that provides access to values in the "property' table in the dataset
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ClrPlus.Core.DynamicXml.DynamicDataTable">
            <summary>
                A dynamic (untyped) wrapper for data tables
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicDataTable._table">
            <summary>
                backing field for the data table this dynamic object represents.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataTable.#ctor(System.Data.DataTable)">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.DynamicXml.DynamicDataTable"/> class.
            </summary>
            <param name="table">The table.</param>
            <remarks></remarks>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataTable.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the rows in the table.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicDataTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the rows in the table.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <remarks></remarks>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicDataTable.Item(System.Int32)">
            <summary>
                Gets the <see cref="T:ClrPlus.Core.DynamicXml.DynamicDataRow"/> at the specified index.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicDataTable.Item(System.Object)">
            <summary>
                Gets the <see cref="T:ClrPlus.Core.DynamicXml.DynamicDataRow"/> where the first column has the value given (ie, treats the first column in the table as a primary key).
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ClrPlus.Core.DynamicXml.DynamicNode">
            <summary>
                Represents a dynamic interface to an XML Node.
                This allows loosey-goosey access to XML Documents
                using c# 4.0 and the dynamic keyword
            </summary>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicNode._element">
            <summary>
                The XML Node this object is fronting for.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.DynamicXml.DynamicNode.attributes">
            <summary>
                The object representing the XML Attributes for the node. Created on demand only.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.#ctor(System.Xml.Linq.XElement)">
            <summary>
                Creates a DynamicXmlNode from an XElement
            </summary>
            <param name="element">An XElement node to use as the actual XML node for this DynamicXmlNode</param>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.#ctor(System.String)">
            <summary>
                Creates a DynamicXmlNode From an new XElement with the given name for the node
            </summary>
            <param name="elementName">The new XElement node name to use as the actual XML node for this DynamicXmlNode</param>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
                Provides the implementation for operations that set member values. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the DynamicObject class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the DynamicObject class, the value is "Test".</param>
            <returns>True, if successful</returns>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Provides the implementation for operations that get member values. Classes derived from the DynamicObject class can override this method to specify dynamic behavior for operations such as getting a value for a property.
                Provides a special case for XML Attributes. If the Member name requested is "Attributes", this will return an DynamicXmlAttributes object
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the DynamicObject class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to result.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
                Some sort of casting thing.
            </summary>
            <param name="binder">the member</param>
            <param name="result">the result</param>
            <returns>True if succesful</returns>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
                Passes thru function calls to the XElement node when there is no matching function in this class.
            </summary>
            <param name="binder">Method to call</param>
            <param name="args">Arguments</param>
            <param name="result">Result from function</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.ToString">
            <summary>
                Returns the XML Text for the node.
            </summary>
            <returns>The XML Text</returns>
        </member>
        <member name="M:ClrPlus.Core.DynamicXml.DynamicNode.Add(System.String)">
            <summary>
                Adds a new child node
            </summary>
            <param name="name">the new node name</param>
            <returns>the DynamicXmlNode for the new node</returns>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicNode.Count">
            <summary>
                Returns the number of descendent nodes
            </summary>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicNode.Element">
            <summary>
                Returns the actual XElement node
            </summary>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicNode.Item(System.Int32)">
            <summary>
                Provides an indexer for the decendent child nodes.
            </summary>
            <param name="index">the index of the node requested</param>
            <returns></returns>
        </member>
        <member name="P:ClrPlus.Core.DynamicXml.DynamicNode.Item(System.String)">
            <summary>
                Provides an indexer to get a child element by it's an attribute value
            </summary>
            <param name="query">
                must be in the form of "attributename=attributevalue"
                so to find the child element with the attribute 'Name' of 'foo'
                value should be :
                "Name=foo"
                If no '=' is in the string, it defaults to assuming that the attribute is 'id'
                and the value is the whole query parameter.
                If there are multiple '=' characters, value ends up being the content after the last '='
            </param>
            <returns></returns>
        </member>
        <member name="T:ClrPlus.Core.Extensions.AssemblyExtensions">
            <summary>
                Extension methods to work with Assemblies.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Extensions.AssemblyExtensions._logo">
            <summary>
                a "logo" of an assembly
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.AssemblyExtensions.Assembly(System.Object)">
            <summary>
                Geths the assembly for a given object.
            </summary>
            <param name="obj"> The obj. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.AssemblyExtensions.Title(System.Reflection.Assembly)">
            <summary>
                Extracts the title of an assembly (TitleAttribute)
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.AssemblyExtensions.Description(System.Reflection.Assembly)">
            <summary>
                Extracts the Description of the assembly (DescriptionAttribute)
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:ClrPlus.Core.Extensions.CollectionExtensions">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.SplitToList(System.String,System.Char[])">
            <summary>
                Splits a string into a List of strings.
            </summary>
            <param name="str"> The STR. </param>
            <param name="separator"> The separator. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.Uniq(System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
                Removes duplicate strings from a list.
            </summary>
            <param name="collection"> The collection. </param>
            <param name="stringComparison"> The string comparison. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.Uniq(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Removes duplicate strings from a list. Assumes Case Sensitivity.
            </summary>
            <param name="collection"> The collection. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.Uniq(System.Collections.Generic.List{System.String},System.StringComparison)">
            <summary>
                Removes duplicate strings from a list.
            </summary>
            <param name="list"> The list. </param>
            <param name="stringComparison"> The string comparison. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.Uniq(System.Collections.Generic.List{System.String})">
            <summary>
                Removes duplicate strings from a list. Assumes Case Sensitivity.
            </summary>
            <param name="list"> The list. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.Combine(System.Collections.Generic.List{System.String},System.Char)">
            <summary>
                Combines a list of strings into a single string seperated by seperator
            </summary>
            <param name="list"> The list. </param>
            <param name="separator"> The separator. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.Combine(System.Collections.Generic.List{System.String},System.String)">
            <summary>
                Combines a list of strings into a single string seperated by seperator
            </summary>
            <param name="list"> The list. </param>
            <param name="separator"> The separator. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds the contents of one collection to another.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="destination"> The destination. </param>
            <param name="collection"> The collection. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the collection object is either null or an empty collection.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="collection"> The collection. </param>
            <returns>
                <c>true</c> if [is null or empty] [the specified collection]; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.LAdd``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                A way to use the Add method more like a Concat. Very useful for Aggregate. Instead of returning void, this returns the list itself.
            </summary>
            <typeparam name="T"> The type of the element </typeparam>
            <param name="list"> </param>
            <param name="item"> The item to add to the list </param>
            <returns>
                The list after the new <paramref name="item" /> has been added.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.CollectionExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            A ToDictionary that does what you'd expect if you have an IEnumerable of KeyValuePairs
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClrPlus.Core.Extensions.Comparer`1">
            <summary>
                A generic implementation of a comparer that takes a delegate to compare with
            </summary>
            <typeparam name="T"> </typeparam>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Extensions.Comparer`1._compareFuction">
            <summary>
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.Comparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.Extensions.Comparer`1"/> class.
            </summary>
            <param name="compareFn"> The compare fn. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.Comparer`1.Compare(`0,`0)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x"> The first object to compare. </param>
            <param name="y"> The second object to compare. </param>
            <returns>
                Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" /> . Zero
                <paramref
                    name="x" />
                equals <paramref name="y" /> . Greater than zero <paramref name="x" /> is greater than <paramref name="y" /> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:ClrPlus.Core.Extensions.EqualityComparer`1">
            <summary>
                A generic implementation of a EqualityComparer that takes a delegate to compare with
            </summary>
            <typeparam name="T"> </typeparam>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Extensions.EqualityComparer`1._equalityCompareFn">
            <summary>
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.EqualityComparer`1._getHashCodeFn">
            <summary>
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.EqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:ClrPlus.Core.Extensions.EqualityComparer`1"/> class.
            </summary>
            <param name="equalityCompareFn"> The equality compare fn. </param>
            <param name="getHashCodeFn"> The get hash code fn. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.EqualityComparer`1.Equals(`0,`0)">
            <summary>
                Determines whether the specified objects are equal.
            </summary>
            <param name="x">
                The first object of type <paramref name="x" /> to compare.
            </param>
            <param name="y">
                The second object of type <paramref name="y" /> to compare.
            </param>
            <returns> true if the specified objects are equal; otherwise, false. </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.EqualityComparer`1.GetHashCode(`0)">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <param name="obj">
                The <see cref="T:System.Object" /> for which a hash code is to be returned.
            </param>
            <returns> A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
            <exception cref="T:System.ArgumentNullException">
                The type of
                <paramref name="obj" />
                is a reference type and
                <paramref name="obj" />
                is null.
            </exception>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
                This method will unwrap an AggregateException as far as it can be to get either a single Exception or a single AggregateException that has a flattened collection of Exceptions The unwrap process removes CoApp canceled exceptions, OperationCanceledExceptions and TaskCanceledExceptions and returns an OperationCanceledException if there is no valid exceptions left. Exception Exception Exception Exception Exception.
            </summary>
            <param name="exception"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.LinqExtensions.Traverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
                Traverses a recursive collection producing a flattened collection.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="source"> </param>
            <param name="recurseFunction"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.LinqExtensions.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Returns the element of a given collection which is highest value based on the function provided.
            </summary>
            <typeparam name="T"> </typeparam>
            <typeparam name="U"> </typeparam>
            <param name="source"> </param>
            <param name="selector"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.LinqExtensions.SingleItemAsEnumerable``1(``0)">
            <summary>
                Creates an enumerable consisting of a single element.
            </summary>
            <typeparam name="T">
                The type of <paramref name="source"/>
            </typeparam>
            <param name="source"> The sole element in the return IEnumerable </param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <paramref name="source"/> as it's only element.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.LinqExtensions.TakeAllBut``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns all the contiguous elements from sequence except for a specified number from the end.
            </summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/>
            </typeparam>
            <param name="source"> The sequence to return elements from. </param>
            <param name="count"> The number of elements to not return from the end. </param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> consisting of all the elements of
                <paramref name="source"/>
                except for the last <paramref name="count"/> elements.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.LinqExtensions.TakeFromEnd``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns the given number of elements from the end of the sequence.
            </summary>
            <typeparam name="T">
                The type of the elements of <paramref name="source"/> .
            </typeparam>
            <param name="source"> The sequence to return elements from. </param>
            <param name="count"> The number of elements to return from the end of the array. </param>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> consisting of the last <paramref name="count"/> elements of
                <paramref name="source"/>
                .
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.LinqExtensions.UnionSingleItem``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns a new collection including the given item. DOES NOT MODIFY THE ORIGINAL COLLECTION.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="collection"> </param>
            <param name="newItem"> </param>
            <returns> </returns>
        </member>
        <member name="T:ClrPlus.Core.Extensions.LinqExtensions.IndexedEnumerator">
            <summary>
                Don
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Extensions.CompareResult`2.Removed">
            <summary>
                Items in the left list no also in the right list
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Extensions.CompareResult`2.Added">
            <summary>
                Items in the right list not in the left list
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.ObjectExtensions.CreateHashCode(System.Object,System.Object[])">
            <summary>
                Create a pretty good hashcode using the hashcodes from a bunch of objects.
                <para>
                    Say you have an class with a bunch of properties (usually strings). You want
                    instantiations to have the same hashcode when all the properties are the same.
                    This method provides the following functionality:
                    <list type="bullet">
                        <item>
                            When
                            <paramref name="objects"/>
                            has 10 or fewer items, returns the sums of the result of multiplying the hashcode of the item at index i by
                            the i+1'th prime (The object at index 0 with have it's hashcode multiplied by 2, index 1 * 3, etc. all summed together)
                        </item>
                        <item>
                            When
                            <paramref name="objects"/>
                            has 11 or more items, takes the result from the previous item and then adds the hashcode
                            of each item from index 10 on. (The result from the previous item + objects[11] + objects[12] + ...)
                        </item>
                    </list>
                </para>
            </summary>
            <param name="input">
                The <see cref="T:System.Object"/> to create a hashcode for.
            </param>
            <param name="objects"> The objects whose hashcodes you want to use. </param>
            <returns>
                The resultant <see cref="T:System.Int32"/> hashcode
            </returns>
        </member>
        <member name="T:ClrPlus.Core.Extensions.SortedObservableCollection`1">
            <summary>
                Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed and allows sorting.
            </summary>
            <typeparam name="T"> The type of elements in the collection. </typeparam>
        </member>
        <member name="M:ClrPlus.Core.Extensions.SortedObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                suppresses events when skipevent == true. This makes it so that an insert doesn't cause a whole bunch of events.
            </summary>
            <param name="e"> </param>
        </member>
        <member name="M:ClrPlus.Core.Extensions.SortedObservableCollection`1.Sort``1(System.Func{`0,``0})">
            <summary>
                Sorts the items of the collection in ascending order according to a key.
            </summary>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector" /> .
            </typeparam>
            <param name="keySelector"> A function to extract a key from an item. </param>
        </member>
        <member name="M:ClrPlus.Core.Extensions.SortedObservableCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Sorts the items of the collection in ascending order according to a key.
            </summary>
            <typeparam name="TKey">
                The type of the key returned by <paramref name="keySelector"/> .
            </typeparam>
            <param name="keySelector"> A function to extract a key from an item. </param>
            <param name="comparer">
                An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.
            </param>
        </member>
        <member name="M:ClrPlus.Core.Extensions.SortedObservableCollection`1.InternalSort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Moves the items of the collection so that their orders are the same as those of the items provided.
            </summary>
            <param name="sortedItems">
                An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide item orders.
            </param>
        </member>
        <member name="T:ClrPlus.Core.Extensions.ObservableExtensions">
            <summary>
                Extension method to sort a regular observable collection.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Extensions.StringExtensions">
            <summary>
                Extensions for strings. Whheeee
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions.LettersNumbersUnderscores">
            <summary>
                a string with just letters, numbers and underscores. Used as a filter somewhere.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions.LettersNumbersUnderscoresAndDashes">
            <summary>
                a string with just letters, numbers, underscores and dashes. Used as a filter somewhere.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions.LettersNumbersUnderscoresAndDashesAndDots">
            <summary>
                a string with just letters, numbers, underscores, dashes and dots. Used as a filter somewhere.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions.Letters">
            <summary>
                a string with just letters. Used as a filter somewhere.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions._validFpCharsThatHurtRegexs">
            <summary>
                These are crazy, but valid filepath characters that cause regexs to puke and fail.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions._versionRegex">
            <summary>
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions._badDirIdCharsRegex">
            <summary>
                What? Note: Eric is this yours?
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions._majorMinorRegex">
            <summary>
                a two-part version regex.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions._emailRegex">
            <summary>
                Email regex. Needs revising
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.format(System.String,System.Object[])">
            <summary>
                Formats the specified format string.
            </summary>
            <param name="formatString"> The format string. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.Error(System.String,System.Object[])">
            <summary>
                Errors the specified format string.
            </summary>
            <param name="formatString"> The format string. </param>
            <param name="args"> The args. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
                Matches the specified input.
            </summary>
            <param name="input"> The input. </param>
            <param name="rxExpression"> The rx expression. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.MatchIgnoreCase(System.String,System.String)">
            <summary>
                Matches a regular expression, ignoring case.
            </summary>
            <param name="input"> The input. </param>
            <param name="rxExpression"> The rx expression. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ToInt32(System.String)">
            <summary>
                coerces a string to an int32, defaults to zero.
            </summary>
            <param name="str"> The STR. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ToInt32(System.String,System.Int32)">
            <summary>
                coerces a string to an int32, defaults to zero.
            </summary>
            <param name="str"> The STR. </param>
            <param name="defaultValue"> The default value if the string isn't a valid int. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.OnlyContains(System.String,System.Char[])">
            <summary>
                returns true when the string contains only the characters passed in.
            </summary>
            <param name="str"> The STR. </param>
            <param name="characters"> The characters. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.OnlyContains(System.String,System.String)">
            <summary>
                returns true when the string contains only the characters in the string passed in .
            </summary>
            <param name="str"> The STR. </param>
            <param name="characters"> The characters. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.PositionOfFirstCharacterNotIn(System.String,System.Char[])">
            <summary>
                Gets the position of the first character that is not in the collection of characters passed in.
            </summary>
            <param name="str"> The STR. </param>
            <param name="characters"> The characters. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.PositionOfFirstCharacterNotIn(System.String,System.String)">
            <summary>
                Gets the position of the first character that is not in the string passed in.
            </summary>
            <param name="str"> The STR. </param>
            <param name="characters"> The characters. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.CreateGuid(System.String)">
            <summary>
                Creates a GUID from an MD5 value of the string passed in.
            </summary>
            <param name="str"> The STR. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions.Wildcards">
            <summary>
                wildcard cache for IsWildcardMatch (so we're not rebuilding the regex every time)
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Extensions.StringExtensions.NewWildcards">
            <summary>
                wildcard cache for IsWildcardMatch (so we're not rebuilding the regex every time)
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.NewIsWildcardMatch(System.String,System.String,System.Boolean,System.String)">
            <summary>
                The new implementation of the wildcard matching function. Rules: * means matches anything except slash or backslash ? means match any one character ** means matches anything
            </summary>
            <param name="text"> </param>
            <param name="wildcardMask"> </param>
            <param name="isMatchingLocation"> </param>
            <param name="currentLocation"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ContainsIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                A case insensitive Contains() method.
            </summary>
            <param name="source"> The source. </param>
            <param name="value"> The value. </param>
            <returns>
                <c>true</c> if [contains ignore case] [the specified source]; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.HasWildcardMatch(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
                Runs IsWildcardMatch on a collection.
            </summary>
            <param name="source"> The source. </param>
            <param name="value"> The value. </param>
            <param name="ignorePrefix"> The ignore prefix. </param>
            <returns>
                <c>true</c> if [has wildcard match] [the specified source]; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.HasWildcards(System.String)">
            <summary>
                Determines whether the specified input has wildcards.
            </summary>
            <param name="input"> The input. </param>
            <returns>
                <c>true</c> if the specified input has wildcards; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.IsTrue(System.String)">
            <summary>
                Determines whether the specified text equal to "true" (ignoring case).
            </summary>
            <param name="text"> The text. </param>
            <returns>
                <c>true</c> if the specified text is true; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.IsFalse(System.String)">
            <summary>
                Determines whether the specified text is equal to "false" (ignoring case).
            </summary>
            <param name="text"> The text. </param>
            <returns>
                <c>true</c> if the specified text is false; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.IsPositive(System.String)">
            <summary>
                Determines whether the specified text equal to some value indicated on/true/enabled (ignoring case).
            </summary>
            <param name="text"> The text. </param>
            <returns>
                <c>true</c> if the specified text is true; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.IsNegative(System.String)">
            <summary>
                Determines whether the specified text is equal to some value indicated negative/off/false/no (ignoring case).
            </summary>
            <param name="text"> The text. </param>
            <returns>
                <c>true</c> if the specified text is false; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.IsBoolean(System.String)">
            <summary>
                Determines whether the specified text is a boolean (true or false).
            </summary>
            <param name="text"> The text. </param>
            <returns>
                <c>true</c> if the specified text is boolean; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
                Encodes the string as an array of UTF8 bytes.
            </summary>
            <param name="text"> The text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ToUtf8String(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Creates a string from a collection of UTF8 bytes
            </summary>
            <param name="bytes"> The bytes. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ProtectBinaryForMachine(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                encrypts the given collection of bytes with the machine key and salt (defaults to "CoAppToolkit")
            </summary>
            <param name="binaryData"> The binary data. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ProtectBinaryForUser(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                encrypts the given collection of bytes with the user key and salt (defaults to "CoAppToolkit")
            </summary>
            <param name="binaryData"> The binary data. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ProtectForMachine(System.String,System.String)">
            <summary>
                encrypts the given string with the machine key and salt (defaults to "CoAppToolkit")
            </summary>
            <param name="text"> The text. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ProtectForUser(System.String,System.String)">
            <summary>
                encrypts the given string with the machine key and salt (defaults to "CoAppToolkit")
            </summary>
            <param name="text"> The text. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.UnprotectBinaryForUser(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                decrypts the given collection of bytes with the user key and salt (defaults to "CoAppToolkit") returns an empty collection of bytes on failure
            </summary>
            <param name="binaryData"> The binary data. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.UnprotectBinaryForMachine(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                decrypts the given collection of bytes with the machine key and salt (defaults to "CoAppToolkit") returns an empty collection of bytes on failure
            </summary>
            <param name="binaryData"> The binary data. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.UnprotectForUser(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                decrypts the given collection of bytes with the user key and salt (defaults to "CoAppToolkit") and returns a string from the UTF8 representation of the bytes. returns an empty string on failure
            </summary>
            <param name="binaryData"> The binary data. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.UnprotectForMachine(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                decrypts the given collection of bytes with the machine key and salt (defaults to "CoAppToolkit") and returns a string from the UTF8 representation of the bytes. returns an empty string on failure
            </summary>
            <param name="binaryData"> The binary data. </param>
            <param name="salt"> The salt. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.MD5Hash(System.String)">
            <summary>
                Calculates the MD5 hash of a string. Additionally all the letters in the hash are in uppercase.
            </summary>
            <param name="input"> a string to a calculate the hash for </param>
            <returns> MD5 hash of the string </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.CreatePublicKeyToken(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Creates the public key token given a public key.. Note: Does this work?
            </summary>
            <param name="publicKey"> The public key. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.MakeSafeDirectoryId(System.String)">
            <summary>
                Creates a safe directory ID for MSI for a possibly non-safe one.
            </summary>
            <param name="input"> The input. </param>
            <returns> Your safe directory ID </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
                Determines whether the specified email is email.
            </summary>
            <param name="email"> The email. </param>
            <returns>
                <c>true</c> if the specified email is email; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.GetKeyTokenFromFullKey(System.Byte[])">
            is this supposed to be deleted?
            <summary>
                Gets the key token from full key. Does this work?
            </summary>
            <param name="fullKey"> The full key. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.ToHexString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Creates a hex representaion of a collection of bytes
            </summary>
            <param name="bytes"> The bytes. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.HtmlEncode(System.String)">
            <summary>
                Encodes a string into HTML encoding format, encoding control characters as well.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.HtmlDecode(System.String)">
            <summary>
                decodes an HTML encoded string
            </summary>
            <param name="s"> The string </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
                encodes the string as a url encoded string
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.UrlDecode(System.String)">
            <summary>
                decodes the URL encoded string
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.EqualsEx(System.String,System.String)">
            <summary>
                Checks to see if strings are equal, with empty strings being considered equal to null.
            </summary>
            <param name="str1">First String to compare</param>
            <param name="str2">Second String to compare</param>
            <returns></returns>
        </member>
        <member name="M:ClrPlus.Core.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Case insensitive version of String.Replace().
            </summary>
            <param name="s">String that contains patterns to replace</param>
            <param name="oldValue">Pattern to find</param>
            <param name="newValue">New pattern to replaces old</param>
            <param name="comparisonType">String comparison type</param>
            <returns></returns>
        </member>
        <member name="T:ClrPlus.Core.Extensions.XmlExtensions">
            <summary>
                Xml Extension Methods.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:ClrPlus.Core.Extensions.XmlExtensions._docCache">
            <summary>
                Cache for xml strings and their xml document equivalent.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.InnerText(System.Xml.XmlNodeList)">
            <summary>
                Returns a list of strings for the inner text of a collection of XmlNodes
            </summary>
            <param name="nodeList"> The node list. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XmlDoc(System.String)">
            <summary>
                Gets the xmldoc representation of the given string
            </summary>
            <param name="xmlDoc"> The XML doc. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPath(System.Xml.XmlDocument,System.String,System.Object[])">
            <summary>
                wrapper method to select nodes in a xmldocument for an XPath Expression
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathSingle(System.Xml.XmlDocument,System.String,System.Object[])">
            <summary>
                wrapper method to select a single in a xmldocument for an XPath Expression
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathContains(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
                wrapper method to select nodes in a xmldocument using a case insensitive XPath expression.
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathExcludes(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
                wrapper method to select nodes in a xmldocument excluding a case insensitive XPath expression.
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPath(System.String,System.String,System.Object[])">
            <summary>
                wrapper method to select nodes in a xmldocument using a parameterized XPath Expression.
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathSingle(System.String,System.String,System.Object[])">
            <summary>
                wrapper method to a single node in a xmldocument using a parameterized XPath Expression.
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathContains(System.String,System.String,System.String)">
            <summary>
                wrapper method to select nodes in a xmldocument string
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathExcludes(System.String,System.String,System.String)">
            <summary>
                wrapper method to select nodes in a xmldocument string excluding a string
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPath(System.Xml.XmlNode,System.String,System.Object[])">
            <summary>
                wrapper method
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathSingle(System.Xml.XmlNode,System.String,System.Object[])">
            <summary>
                wrapper method
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathContains(System.Xml.XmlNode,System.String,System.String)">
            <summary>
                wrapper method
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathExcludes(System.Xml.XmlNode,System.String,System.String)">
            <summary>
                wrapper method
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.ToXmlDocument(System.Xml.XmlNodeList)">
            <summary>
                Creates and Xml document from a node list
            </summary>
            <param name="nodeList"> The node list. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPath(System.Xml.XmlNodeList,System.String,System.Object[])">
            <summary>
                wrapper function
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathSingle(System.Xml.XmlNodeList,System.String,System.Object[])">
            <summary>
                wrapper function
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="args"> The args. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathContains(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
                wrapper function
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.XPathExcludes(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
                wrapper function
            </summary>
            <param name="doc"> The doc. </param>
            <param name="XPathExpression"> The X path expression. </param>
            <param name="containsText"> The contains text. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.DocumentNodes(System.Xml.XmlDocument)">
            <summary>
                wrapper function
            </summary>
            <param name="doc"> The doc. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.IsXmlFile(System.String)">
            <summary>
                Determines whether a given file is an xml document
            </summary>
            <param name="filename"> The filename. </param>
            <returns>
                <c>true</c> if [is XML file] [the specified filename]; otherwise, <c>false</c> .
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.PrettySaveXml(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Pretties the save XML.
            </summary>
            <param name="xmlDocumentText"> The XML document text. </param>
            <param name="outputPath"> The output path. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.PrettySaveXml(System.IO.MemoryStream,System.String)">
            <summary>
                Pretties the save XML.
            </summary>
            <param name="xmlDocumentStream"> The XML document stream. </param>
            <param name="outputPath"> The output path. </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Extensions.XmlExtensions.PrettyXml(System.IO.MemoryStream)">
            <summary>
                Pretties the save XML.
            </summary>
            <param name="xmlDocumentStream"> The XML document stream. </param>
            <remarks>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ClrPlus.Core.Linq.Serialization.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:ClrPlus.Core.Linq.Serialization.Evaluator.PartialEval(System.Linq.Expressions.Expression)" -->
        <member name="M:ClrPlus.Core.Linq.Serialization.Evaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
                Anything which involves has a sub-Expression as ParameterExpression, such as a MemberExpression, will not pass this check.
            </summary>
            <param name="expression"> </param>
            <returns> </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ClrPlus.Core.Linq.Serialization.Evaluator.SubtreeEvaluator" -->
        <member name="M:ClrPlus.Core.Linq.Serialization.Evaluator.SubtreeEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
                Attempt to evaluate each node upon visiting. If the node is a "candidate" (Nominator), then we replace the Expression node with its evaluated form.
            </summary>
            <param name="exp"> </param>
            <returns> </returns>
        </member>
        <member name="T:ClrPlus.Core.Linq.Serialization.Evaluator.Nominator">
            <summary>
                Performs bottom-up analysis to determine which nodes can possibly be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Evaluator.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
                If a child node cannot be evaluated, then its parent can't either. A Expression node will fail to be a candidate if it (or a sub-Expression) has a ParameterExpression
            </summary>
            <param name="expression"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.LinqHelper.CastToGenericEnumerable(System.Collections.IEnumerable,System.Type)">
            <summary>
                Casts a collection, at runtime, to a generic (or strongly-typed) collection.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.LinqHelper.FuncToExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                also see: http://stackoverflow.com/questions/5862266/how-is-a-funct-implicitly-converted-to-expressionfunct
            </summary>
            <typeparam name="T"> </typeparam>
            <typeparam name="TResult"> </typeparam>
            <param name="func"> </param>
            <returns> </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ClrPlus.Core.Linq.Serialization.Query`1" -->
        <member name="M:ClrPlus.Core.Linq.Serialization.Query`1.GetEnumerator">
            <summary>
                on the call to any of the System.Linq extension methods on IEnumerable{T}, this method will get called.
                <see cref="T:System.Linq.Enumerable"/>
            </summary>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Query`1.ToString">
            <summary>
                in Debug, this is called implicitly.
            </summary>
            <returns> </returns>
        </member>
        <member name="F:ClrPlus.Core.Linq.Serialization.Xml.ExpressionXmlSerializer.primitiveTypes">
            <summary>
                generate XML attributes for these primitive Types.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.ExpressionXmlSerializer.TryCustomSerializers(System.Linq.Expressions.Expression,System.Xml.Linq.XElement@)">
            <summary>
                Uses first applicable custom serializer, then returns. Does not attempt to use all custom serializers.
            </summary>
            <param name="e"> </param>
            <param name="result"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.ExpressionXmlSerializer.GenerateXmlFromObject(System.String,System.Object)">
            <summary>
                Called from somewhere on call stack... from ConstantExpression.Value Modified since original code for this method was incorrectly getting the value as .ToString() for non-primitive types, which ExpressionXmlSerializer was unable to later parse back into a value (ExpressionXmlSerializer.ParseConstantFromElement).
            </summary>
            <param name="propName"> </param>
            <param name="value"> ConstantExpression.Value </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.ExpressionXmlSerializer.GenerateXmlFromKnownTypes(System.String,System.Object,System.Type)">
            <summary>
                For use with ConstantExpression.Value
            </summary>
            <param name="xName"> </param>
            <param name="instance"> </param>
            <param name="knownType"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.ExpressionXmlSerializer.TryCustomDeserializers(System.Xml.Linq.XElement,System.Linq.Expressions.Expression@)">
            <summary>
                Uses first applicable custom deserializer, then returns. Does not attempt to use all custom deserializers.
            </summary>
            <param name="xml"> </param>
            <param name="result"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.ExpressionXmlSerializer.ParseConstantFromElement(System.Xml.Linq.XElement,System.String,System.Type)">
            <summary>
                returns object for use in a call to Expression.Constant(object, Type)
            </summary>
            <param name="xml"> </param>
            <param name="elemName"> </param>
            <param name="expectedType"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.KnownTypeExpressionXmlConverter.TryDeserialize(System.Xml.Linq.XElement,System.Linq.Expressions.Expression@)">
            <summary>
                code originally in method ParseConstantFromElement(XElement xml, string elemName, Type expectedType)
            </summary>
            <param name="x"> </param>
            <param name="e"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.TypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Relying on the constructor only, to load all possible (including IEnumerable, IQueryable, Nullable, Array) Types into memory, may not scale well.
            </summary>
            <param name="assemblies"> </param>
            <param name="knownTypes"> </param>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.TypeResolver.HasMappedKnownType(System.Type,System.Type@)">
            <summary>
                Checks if the input Type is "mapped" or otherwise somehow related (e.g. Array) to a KnownType found in this.KnownTypes.
            </summary>
            <param name="input"> </param>
            <param name="knownType"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.TypeResolver.IsIEnumerableOf(System.Type,System.Type)">
            <summary>
            </summary>
            <param name="enumerableType"> the candidate enumerable Type in question </param>
            <param name="elementType"> is the candidate type a IEnumerable of elementType </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Linq.Serialization.Xml.TypeResolver.GetDerivedTypes(System.Type)">
            <summary>
                For determining KnownType(s) to declare on a DataContract
            </summary>
            <param name="baseType"> </param>
            <returns> </returns>
        </member>
        <member name="P:ClrPlus.Core.Linq.Serialization.Xml.TypeResolver.knownTypes">
            <summary>
                KnownTypes for DataContractSerializer. Only needs to hold the element type, not the collection or array type.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.AttDef">
            <summary>
                An attribute definition in a DTD.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.AttDef.#ctor(System.String)">
            <summary>
                Initialises a new instance of the <see cref="T:ClrPlus.Core.Sgml.AttDef"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.AttDef.SetEnumeratedType(System.String[],ClrPlus.Core.Sgml.AttributeType)">
            <summary>
                Sets the attribute definition to have an enumerated value.
            </summary>
            <param name="enumValues">The possible values in the enumeration.</param>
            <param name="type">The type to set the attribute to.</param>
            <exception cref="T:System.ArgumentException">
                If the type parameter is not either <see cref="F:ClrPlus.Core.Sgml.AttributeType.ENUMERATION"/> or <see cref="F:ClrPlus.Core.Sgml.AttributeType.NOTATION"/>.
            </exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.AttDef.SetType(System.String)">
            <summary>
                Sets the type of the attribute definition.
            </summary>
            <param name="type">
                The string representation of the attribute type, corresponding to the values in the <see cref="T:ClrPlus.Core.Sgml.AttributeType"/> enumeration.
            </param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.AttDef.SetPresence(System.String)">
            <summary>
                Sets the attribute presence declaration.
            </summary>
            <param name="token">
                The string representation of the attribute presence, corresponding to one of the values in the
                <see cref="P:ClrPlus.Core.Sgml.AttDef.AttributePresence"/>
                enumeration.
            </param>
            <returns>true if the attribute presence implies the element has a default value.</returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.AttDef.Name">
            <summary>
                The name of the attribute declared by this attribute definition.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.AttDef.Default">
            <summary>
                Gets of sets the default value of the attribute.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.AttDef.AttributePresence">
            <summary>
                The constraints on the attribute's presence on an element.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.AttDef.EnumValues">
            <summary>
                Gets or sets the possible enumerated values for the attribute.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.AttDef.Type">
            <summary>
                The <see cref="T:ClrPlus.Core.Sgml.AttributeType"/> of the attribute declaration.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.Attribute">
            <summary>
                This class represents an attribute.  The AttDef is assigned
                from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
                Attribute objects are reused during parsing to reduce memory allocations,
                hence the Reset method.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.AttributePresence">
            <summary>
                Defines the different constraints on an attribute's presence on an element.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributePresence.Default">
            <summary>
                The attribute has a default value, and its presence is optional.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributePresence.Fixed">
            <summary>
                The attribute has a fixed value, if present.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributePresence.Required">
            <summary>
                The attribute must always be present on every element.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributePresence.Implied">
            <summary>
                The element is optional.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.AttributeType">
            <summary>
                Defines the different possible attribute types.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.Default">
            <summary>
                Attribute type not specified.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.CDATA">
            <summary>
                The attribute contains text (with no markup).
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.ENTITY">
            <summary>
                The attribute contains an entity declared in a DTD.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.ENTITIES">
            <summary>
                The attribute contains a number of entities declared in a DTD.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.ID">
            <summary>
                The attribute is an id attribute uniquely identifie the element it appears on.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.IDREF">
            <summary>
                The attribute value can be any declared subdocument or data entity name.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.IDREFS">
            <summary>
                The attribute value is a list of (space separated) declared subdocument or data entity names.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NAME">
            <summary>
                The attribute value is a SGML Name.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NAMES">
            <summary>
                The attribute value is a list of (space separated) SGML Names.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NMTOKEN">
            <summary>
                The attribute value is an XML name token (i.e. contains only name characters, but in this case with digits and other valid name characters accepted as the first character).
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NMTOKENS">
            <summary>
                The attribute value is a list of (space separated) XML NMTokens.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NUMBER">
            <summary>
                The attribute value is a number.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NUMBERS">
            <summary>
                The attribute value is a list of (space separated) numbers.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NUTOKEN">
            <summary>
                The attribute value is a number token (i.e. a name that starts with a number).
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NUTOKENS">
            <summary>
                The attribute value is a list of number tokens.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.NOTATION">
            <summary>
                Attribute value is a member of the bracketed list of notation names that qualifies this reserved name.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.AttributeType.ENUMERATION">
            <summary>
                The attribute value is one of a set of allowed names.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.CaseFolding">
            <summary>
                SGML is case insensitive, so here you can choose between converting
                to lower case or upper case tags.  "None" means that the case is left
                alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.CaseFolding.None">
            <summary>
                Do not convert case, except for converting end tags to match start tags.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.CaseFolding.ToUpper">
            <summary>
                Convert tags to upper case.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.CaseFolding.ToLower">
            <summary>
                Convert tags to lower case.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.ContentModel">
            <summary>
                Defines the content model for an element.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.#ctor">
            <summary>
                Initialises a new instance of the <see cref="T:ClrPlus.Core.Sgml.ContentModel"/> class.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.PushGroup">
            <summary>
                Begins processing of a nested model group.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.PopGroup">
            <summary>
                Finishes processing of a nested model group.
            </summary>
            <returns>The current depth of the group nesting, or -1 if there are no more groups to pop.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.AddSymbol(System.String)">
            <summary>
                Adds a new symbol to the current group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.AddConnector(System.Char)">
            <summary>
                Adds a connector onto the member list for the current group.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:ClrPlus.Core.Sgml.SgmlParseException">
                If the content is not mixed and has no members yet, or if the group type has been set and the
                connector does not match the group type.
            </exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.AddOccurrence(System.Char)">
            <summary>
                Adds an occurrence character for the current model group, setting it's <see cref="T:ClrPlus.Core.Sgml.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.SetDeclaredContent(System.String)">
            <summary>
                Sets the contained content for the content model.
            </summary>
            <param name="dc">The text specified the permissible declared child content.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ContentModel.CanContain(System.String,ClrPlus.Core.Sgml.SgmlDtd)">
            <summary>
                Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.ContentModel.CurrentDepth">
            <summary>
                The number of groups on the stack.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.ContentModel.DeclaredContent">
            <summary>
                The allowed child content, specifying if nested children are not allowed and if so, what content is allowed.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.DeclaredContent">
            <summary>
                Where nested subelements cannot occur within an element, its contents can be declared to consist of one of the types of declared content contained in this enumeration.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.DeclaredContent.Default">
            <summary>
                Not defined.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.DeclaredContent.CDATA">
            <summary>
                Character data (CDATA), which contains only valid SGML characters.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.DeclaredContent.RCDATA">
            <summary>
                Replaceable character data (RCDATA), which can contain text, character references and/or general entity references that resolve to character data.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.DeclaredContent.EMPTY">
            <summary>
                Empty element (EMPTY), i.e. having no contents, or contents that can be generated by the program.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.ElementDecl">
            <summary>
                An element declaration in a DTD.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ElementDecl.#ctor(System.String,System.Boolean,System.Boolean,ClrPlus.Core.Sgml.ContentModel,System.String[],System.String[])">
            <summary>
                Initialises a new element declaration instance.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="sto">Whether the start tag is optional.</param>
            <param name="eto">Whether the end tag is optional.</param>
            <param name="cm">
                The <see cref="P:ClrPlus.Core.Sgml.ElementDecl.ContentModel"/> of the element.
            </param>
            <param name="inclusions"></param>
            <param name="exclusions"></param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ElementDecl.FindAttribute(System.String)">
            <summary>
                Finds the attribute definition with the specified name.
            </summary>
            <param name="name">
                The name of the <see cref="T:ClrPlus.Core.Sgml.AttDef"/> to find.
            </param>
            <returns>
                The <see cref="T:ClrPlus.Core.Sgml.AttDef"/> with the specified name.
            </returns>
            <exception cref="T:System.InvalidOperationException">If the attribute list has not yet been initialised.</exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ElementDecl.AddAttDefs(System.Collections.Generic.Dictionary{System.String,ClrPlus.Core.Sgml.AttDef})">
            <summary>
                Adds attribute definitions to the element declaration.
            </summary>
            <param name="list">The list of attribute definitions to add.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.ElementDecl.CanContain(System.String,ClrPlus.Core.Sgml.SgmlDtd)">
            <summary>
                Tests whether this element can contain another specified element.
            </summary>
            <param name="name">The name of the element to check for.</param>
            <param name="dtd">The DTD to use to do the check.</param>
            <returns>True if the specified element can be contained by this element.</returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.ElementDecl.Name">
            <summary>
                The element name.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.ElementDecl.ContentModel">
            <summary>
                The <see cref="T:ClrPlus.Core.Sgml.ContentModel"/> of the element declaration.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.ElementDecl.EndTagOptional">
            <summary>
                Whether the end tag of the element is optional.
            </summary>
            <value>true if the end tag of the element is optional, otherwise false.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.ElementDecl.StartTagOptional">
            <summary>
                Whether the start tag of the element is optional.
            </summary>
            <value>true if the start tag of the element is optional, otherwise false.</value>
        </member>
        <member name="T:ClrPlus.Core.Sgml.Entity">
            <summary>
                An Entity declared in a DTD.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.Entity.EOF">
            <summary>
                The character indicating End Of File.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pubid">The public id of the entity.</param>
            <param name="uri">The uri of the entity.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.#ctor(System.String,System.String)">
            <summary>
                Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="literal">The literal value of the entity.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.#ctor(System.String,System.Uri,System.IO.TextReader,System.String)">
            <summary>
                Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="baseUri">The baseUri for the entity to read from the TextReader.</param>
            <param name="stm">The TextReader to read the entity from.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.ReadChar">
            <summary>
                Reads the next character from the DTD stream.
            </summary>
            <returns>The next character from the DTD stream.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Open(ClrPlus.Core.Sgml.Entity,System.Uri)">
            <summary>
                Begins processing an entity.
            </summary>
            <param name="parent">The parent of this entity.</param>
            <param name="baseUri">The base Uri for processing this entity within.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Close">
            <summary>
                Closes the reader from which the entity is being read.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.SkipWhitespace">
            <summary>
                Returns the next character after any whitespace.
            </summary>
            <returns>The next character that is not whitespace.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
                Scans a token from the input stream and returns the result.
            </summary>
            <param name="sb">
                The <see cref="T:System.Text.StringBuilder"/> to use to process the token.
            </param>
            <param name="term">A set of characters to look for as terminators for the token.</param>
            <param name="nmtoken">true if the token should be a NMToken, otherwise false.</param>
            <returns>The scanned token.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
                Read a literal from the input stream.
            </summary>
            <param name="sb">
                The <see cref="T:System.Text.StringBuilder"/> to use to build the literal.
            </param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The literal scanned from the input stream.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.ScanToEnd(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Reads input until the end of the input stream or until a string of terminator characters is found.
            </summary>
            <param name="sb">
                The <see cref="T:System.Text.StringBuilder"/> to use to build the string.
            </param>
            <param name="type">The type of the element being read (only used in reporting errors).</param>
            <param name="terminators">The string of terminator characters to look for.</param>
            <returns>The string read from the input stream.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.ExpandCharEntity">
            <summary>
                Expands a character entity to be read from the input stream.
            </summary>
            <returns>The string for the character entity.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Error(System.String)">
            <summary>
                Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <exception cref="T:ClrPlus.Core.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Error(System.String,System.Char)">
            <summary>
                Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="ch">The unexpected character causing the error.</param>
            <exception cref="T:ClrPlus.Core.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Error(System.String,System.Int32)">
            <summary>
                Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="x">The value causing the error.</param>
            <exception cref="T:ClrPlus.Core.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Error(System.String,System.String)">
            <summary>
                Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="arg">The argument for the error.</param>
            <exception cref="T:ClrPlus.Core.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Context">
            <summary>
                Returns a string giving information on how the entity is referenced and declared, walking up the parents until the top level parent entity is found.
            </summary>
            <returns>Contextual information for the entity.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.IsLiteralType(System.String)">
            <summary>
                Checks whether a token denotes a literal entity or not.
            </summary>
            <param name="token">The token to check.</param>
            <returns>true if the token is "CDATA", "SDATA" or "PI", otherwise false.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.SetLiteralType(System.String)">
            <summary>
                Sets the entity to be a literal of the type specified.
            </summary>
            <param name="token">One of "CDATA", "SDATA" or "PI".</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Finalize">
            <summary>
                The finalizer for the Entity class.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Entity.Dispose(System.Boolean)">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing">true if this method has been called by user code, false if it has been called through a finalizer.</param>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Name">
            <summary>
                The name of the entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.IsHtml">
            <summary>
                True if the entity is the html element entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.PublicId">
            <summary>
                The public identifier of this entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Uri">
            <summary>
                The Uri that is the source for this entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.ResolvedUri">
            <summary>
                The resolved location of the DTD this entity is from.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Parent">
            <summary>
                Gets the parent Entity of this Entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Lastchar">
            <summary>
                The last character read from the input stream for this entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Line">
            <summary>
                The line on which this entity was defined.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.LinePosition">
            <summary>
                The index into the line where this entity is defined.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.IsInternal">
            <summary>
                Whether this entity is an internal entity or not.
            </summary>
            <value>true if this entity is internal, otherwise false.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Literal">
            <summary>
                The literal value of this entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.LiteralType">
            <summary>
                The <see cref="P:ClrPlus.Core.Sgml.Entity.LiteralType"/> of this entity.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.IsWhitespace">
            <summary>
                Whether the last char read for this entity is a whitespace character.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Proxy">
            <summary>
                The proxy server to use when making web requests to resolve entities.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Entity.Encoding">
            <summary>
                Gets the character encoding for this entity.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.Group">
            <summary>
                Defines a group of elements nested within another element.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Group.#ctor(ClrPlus.Core.Sgml.Group)">
            <summary>
                Initialises a new Content Model Group.
            </summary>
            <param name="parent">The parent model group.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Group.AddGroup(ClrPlus.Core.Sgml.Group)">
            <summary>
                Adds a new child model group to the end of the group's members.
            </summary>
            <param name="g">The model group to add.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Group.AddSymbol(System.String)">
            <summary>
                Adds a new symbol to the group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Group.AddConnector(System.Char)">
            <summary>
                Adds a connector onto the member list.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:ClrPlus.Core.Sgml.SgmlParseException">
                If the content is not mixed and has no members yet, or if the group type has been set and the
                connector does not match the group type.
            </exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Group.AddOccurrence(System.Char)">
            <summary>
                Adds an occurrence character for this group, setting it's <see cref="P:ClrPlus.Core.Sgml.Group.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Group.CanContain(System.String,ClrPlus.Core.Sgml.SgmlDtd)">
            <summary>
                Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
            <remarks>
                Rough approximation - this is really assuming an "Or" group
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Group.Occurrence">
            <summary>
                The <see cref="P:ClrPlus.Core.Sgml.Group.Occurrence"/> of this group.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Group.TextOnly">
            <summary>
                Checks whether the group contains only text.
            </summary>
            <value>true if the group is of mixed content and has no members, otherwise false.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.Group.Parent">
            <summary>
                The parent group of this group.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.GroupType">
            <summary>
                The type of the content model group, defining the order in which child elements can occur.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.GroupType.None">
            <summary>
                No model group.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.GroupType.And">
            <summary>
                All elements must occur, in any order.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.GroupType.Or">
            <summary>
                One (and only one) must occur.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.GroupType.Sequence">
            <summary>
                All element must occur, in the specified order.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.HWStack">
            <summary>
                This stack maintains a high water mark for allocated objects so the client
                can reuse the objects in the stack to reduce memory allocations, this is
                used to maintain current state of the parser for element stack, and attributes
                in each element.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.HWStack.#ctor(System.Int32)">
            <summary>
                Initialises a new instance of the HWStack class.
            </summary>
            <param name="growth">The amount to grow the stack space by, if more space is needed on the stack.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.HWStack.Pop">
            <summary>
                Removes and returns the item at the top of the stack
            </summary>
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.HWStack.Push">
            <summary>
                Pushes a new slot at the top of the stack.
            </summary>
            <returns>The object at the top of the stack.</returns>
            <remarks>
                This method tries to reuse a slot, if it returns null then
                the user has to call the other Push method.
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Sgml.HWStack.RemoveAt(System.Int32)">
            <summary>
                Remove a specific item from the stack.
            </summary>
            <param name="i">The index of the item to remove.</param>
        </member>
        <member name="P:ClrPlus.Core.Sgml.HWStack.Count">
            <summary>
                The number of items currently in the stack.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.HWStack.Size">
            <summary>
                The size (capacity) of the stack.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.HWStack.Item(System.Int32)">
            <summary>
                Returns the item at the requested index or null if index is out of bounds
            </summary>
            <param name="i">The index of the item to retrieve.</param>
            <returns>The item at the requested index or null if index is out of bounds.</returns>
        </member>
        <member name="T:ClrPlus.Core.Sgml.LiteralType">
            <summary>
                The different types of literal text returned by the SgmlParser.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.LiteralType.CDATA">
            <summary>
                CDATA text literals.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.LiteralType.SDATA">
            <summary>
                SDATA entities.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.LiteralType.PI">
            <summary>
                The contents of a Processing Instruction.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.Node">
            <summary>
                This class models an XML node, an array of elements in scope is maintained while parsing
                for validation purposes, and these Node objects are reused to reduce object allocation,
                hence the reset method.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
                Attribute objects are reused during parsing to reduce memory allocations,
                hence the Reset method.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.Occurrence">
            <summary>
                Qualifies the occurrence of a child element within a content model group.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.Occurrence.Required">
            <summary>
                The element is required and must occur only once.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.Occurrence.Optional">
            <summary>
                The element is optional and must occur once at most.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.Occurrence.ZeroOrMore">
            <summary>
                The element is optional and can be repeated.
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.Occurrence.OneOrMore">
            <summary>
                The element must occur at least once or more times.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.SgmlDtd">
            <summary>
                Provides DTD parsing and support for the SgmlParser framework.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlDtd.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
                Initialises a new instance of the <see cref="T:ClrPlus.Core.Sgml.SgmlDtd"/> class.
            </summary>
            <param name="name">The name of the DTD.</param>
            <param name="nt">
                The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.
            </param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
                Parses a DTD and creates a <see cref="T:ClrPlus.Core.Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="pubid"></param>
            <param name="url"></param>
            <param name="subset"></param>
            <param name="proxy"></param>
            <param name="nt">
                The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.
            </param>
            <returns>
                A new <see cref="T:ClrPlus.Core.Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
                Parses a DTD and creates a <see cref="T:ClrPlus.Core.Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="input">The reader to load the DTD from.</param>
            <param name="subset"></param>
            <param name="proxy">The proxy server to use when loading resources.</param>
            <param name="nt">
                The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.
            </param>
            <returns>
                A new <see cref="T:ClrPlus.Core.Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlDtd.FindEntity(System.String)">
            <summary>
                Finds an entity in the DTD with the specified name.
            </summary>
            <param name="name">
                The name of the <see cref="T:ClrPlus.Core.Sgml.Entity"/> to find.
            </param>
            <returns>The specified Entity from the DTD.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlDtd.FindElement(System.String)">
            <summary>
                Finds an element declaration in the DTD with the specified name.
            </summary>
            <param name="name">
                The name of the <see cref="T:ClrPlus.Core.Sgml.ElementDecl"/> to find and return.
            </param>
            <returns>
                The <see cref="T:ClrPlus.Core.Sgml.ElementDecl"/> matching the specified name.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlDtd.GetEntitiesLiteralNameLookup">
            <summary>
                Returns a dictionary for looking up entities by their <see cref="P:ClrPlus.Core.Sgml.Entity.Literal"/> value.
            </summary>
            <returns>
                A dictionary for looking up entities by their <see cref="P:ClrPlus.Core.Sgml.Entity.Literal"/> value.
            </returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlDtd.Name">
            <summary>
                The name of the DTD.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlDtd.NameTable">
            <summary>
                Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="T:ClrPlus.Core.Sgml.SgmlParseException">
            <summary>
                Thrown if any errors occur while parsing the source.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlParseException.#ctor">
            <summary>
                Instantiates a new instance of SgmlParseException with no specific error information.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlParseException.#ctor(System.String)">
            <summary>
                Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlParseException.#ctor(System.String,ClrPlus.Core.Sgml.Entity)">
            <summary>
                Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="e">The entity on which the error occurred.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlParseException.#ctor(System.String,System.Exception)">
            <summary>
                Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="innerException">The original exception that caused the problem.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the SgmlParseException class with serialized data.
            </summary>
            <param name="streamInfo">The object that holds the serialized object data.</param>
            <param name="streamCtx">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a SerializationInfo with the data needed to serialize the exception.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
            </param>
            <param name="context">
                The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.
            </param>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlParseException.EntityContext">
            <summary>
                Contextual information detailing the entity on which the error occurred.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Sgml.SgmlReader">
            <summary>
                SgmlReader is an XmlReader API over any SGML document (including built in
                support for HTML).
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Sgml.SgmlReader.UNDEFINED_NAMESPACE">
            <summary>
                The value returned when a namespace is queried and none has been specified.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.#ctor">
            <summary>
                Initialises a new instance of the SgmlReader class.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.#ctor(System.Xml.XmlNameTable)">
            <summary>
                Initialises a new instance of the SgmlReader class with an existing <see cref="T:System.Xml.XmlNameTable"/>, which is NOT used.
            </summary>
            <param name="nt">The nametable to use.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.SetBaseUri(System.String)">
            <summary>
                The base Uri is used to resolve relative Uri's like the SystemLiteral and
                Href properties.  This is a method because BaseURI is a read-only
                property on the base XmlReader class.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.GetAttribute(System.String)">
            <summary>
                Gets the value of an attribute with the specified <see cref="P:ClrPlus.Core.Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.GetAttribute(System.String,System.String)">
            <summary>
                Gets the value of the attribute with the specified <see cref="P:ClrPlus.Core.Sgml.SgmlReader.LocalName"/> and <see cref="P:ClrPlus.Core.Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.GetAttribute(System.Int32)">
            <summary>
                Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.MoveToAttribute(System.String)">
            <summary>
                Moves to the atttribute with the specified <see cref="P:ClrPlus.Core.Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
                Moves to the attribute with the specified <see cref="P:ClrPlus.Core.Sgml.SgmlReader.LocalName"/> and <see cref="P:ClrPlus.Core.Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.MoveToAttribute(System.Int32)">
            <summary>
                Moves to the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute to move to.</param>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.MoveToFirstAttribute">
            <summary>
                Moves to the first attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.MoveToNextAttribute">
            <summary>
                Moves to the next attribute.
            </summary>
            <returns>true if there is a next attribute; false if there are no more attributes.</returns>
            <remarks>
                If the current node is an element node, this method is equivalent to <see cref="M:ClrPlus.Core.Sgml.SgmlReader.MoveToFirstAttribute"/>. If
                <see cref="M:ClrPlus.Core.Sgml.SgmlReader.MoveToNextAttribute"/>
                returns true,
                the reader moves to the next attribute; otherwise, the position of the reader does not change.
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.MoveToElement">
            <summary>
                Moves to the element that contains the current attribute node.
            </summary>
            <returns>
                true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned
                on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.GetEncoding">
            <summary>
                Returns the encoding of the current entity.
            </summary>
            <returns>The encoding of the current entity.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.Read">
            <summary>
                Reads the next node from the stream.
            </summary>
            <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
                Consumes and returns a literal block of text, expanding entities as it does so.
            </summary>
            <param name="sb">The string builder to use.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The consumed literal.</returns>
            <remarks>
                This version is slightly different from <see cref="M:ClrPlus.Core.Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)"/> in that
                it also expands entities.
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.Close">
            <summary>
                Changes the <see cref="P:ClrPlus.Core.Sgml.SgmlReader.ReadState"/> to Closed.
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.ReadString">
            <summary>
                Reads the contents of an element or text node as a string.
            </summary>
            <returns>The contents of the element or an empty string.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.ReadInnerXml">
            <summary>
                Reads all the content, including markup, as a string.
            </summary>
            <returns>
                All the XML content, including markup, in the current node. If the current node has no children,
                an empty string is returned. If the current node is neither an element nor attribute, an empty
                string is returned.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.ReadOuterXml">
            <summary>
                Reads the content, including markup, representing this node and all its children.
            </summary>
            <returns>
                If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.LookupNamespace(System.String)">
            <summary>
                Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>The namespace URI to which the prefix maps or a null reference (Nothing in Visual Basic) if no matching prefix is found.</returns>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.ResolveEntity">
            <summary>
                Resolves the entity reference for EntityReference nodes.
            </summary>
            <exception cref="T:System.InvalidOperationException">SgmlReader does not resolve or return entities.</exception>
        </member>
        <member name="M:ClrPlus.Core.Sgml.SgmlReader.ReadAttributeValue">
            <summary>
                Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
                true if there are nodes to return. false if the reader is not positioned on an attribute node when the initial call is made or if all the
                attribute values have been read. An empty attribute, such as, misc="", returns true with a single node with a value of string.Empty.
            </returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Dtd">
            <summary>
                Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
                it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.DocType">
            <summary>
                The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.RootElementName">
            <summary>
                The root element of the document.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.PublicIdentifier">
            <summary>
                The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.SystemLiteral">
            <summary>
                The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.InternalSubset">
            <summary>
                The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.InputStream">
            <summary>
                The input stream containing SGML data to parse.
                You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.WebProxy">
            <summary>
                Sometimes you need to specify a proxy server in order to load data via HTTP
                from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Href">
            <summary>
                Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.StripDocType">
            <summary>
                Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.IgnoreDtd">
            <summary>
                Gets or sets a value indicating whether to ignore any DTD reference.
            </summary>
            <value>
                <c>true</c> if DTD references should be ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.CaseFolding">
            <summary>
                The case conversion behaviour while processing tags.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.ErrorLog">
            <summary>
                DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.ErrorLogFile">
            <summary>
                DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.NodeType">
            <summary>
                The node type of the node currently being parsed.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Name">
            <summary>
                The name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.LocalName">
            <summary>
                The local name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.NamespaceURI">
            <summary>
                The namespace of the current node, if currently positioned on a node or attribute.
            </summary>
            <remarks>
                If not positioned on a node or attribute, <see cref="F:ClrPlus.Core.Sgml.SgmlReader.UNDEFINED_NAMESPACE"/> is returned.
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Prefix">
            <summary>
                The prefix of the current node's name.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.HasValue">
            <summary>
                Whether the current node has a value or not.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Value">
            <summary>
                The value of the current node.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Depth">
            <summary>
                Gets the depth of the current node in the XML document.
            </summary>
            <value>The depth of the current node in the XML document.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.BaseURI">
            <summary>
                Gets the base URI of the current node.
            </summary>
            <value>The base URI of the current node.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.IsEmptyElement">
            <summary>
                Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.IsDefault">
            <summary>
                Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
            <value>
                true if the current node is an attribute whose value was generated from the default value defined in the DTD or
                schema; false if the attribute value was explicitly set.
            </value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.QuoteChar">
            <summary>
                Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
            <value>The quotation mark character (" or ') used to enclose the value of an attribute node.</value>
            <remarks>
                This property applies only to an attribute node.
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.XmlSpace">
            <summary>
                Gets the current xml:space scope.
            </summary>
            <value>
                One of the <see cref="P:ClrPlus.Core.Sgml.SgmlReader.XmlSpace"/> values. If no xml:space scope exists, this property defaults to XmlSpace.None.
            </value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.XmlLang">
            <summary>
                Gets the current xml:lang scope.
            </summary>
            <value>The current xml:lang scope.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.WhitespaceHandling">
            <summary>
                Specifies how white space is handled.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.AttributeCount">
            <summary>
                Gets the number of attributes on the current node.
            </summary>
            <value>The number of attributes on the current node.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Item(System.Int32)">
            <summary>
                Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Item(System.String)">
            <summary>
                Gets the value of an attribute with the specified <see cref="P:ClrPlus.Core.Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.Item(System.String,System.String)">
            <summary>
                Gets the value of the attribute with the specified <see cref="P:ClrPlus.Core.Sgml.SgmlReader.LocalName"/> and <see cref="P:ClrPlus.Core.Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.IsHtml">
            <summary>
                Gets whether the content is HTML or not.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.EOF">
            <summary>
                Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            <value>true if the reader is positioned at the end of the stream; otherwise, false.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.ReadState">
            <summary>
                Gets the state of the reader.
            </summary>
            <value>One of the ReadState values.</value>
        </member>
        <member name="P:ClrPlus.Core.Sgml.SgmlReader.NameTable">
            <summary>
                Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.AutoManage(System.Threading.Tasks.Task)">
            <summary>
                This associates a child task with the parent task. This isn't necessary (and will have no effect) when the child task is created with AttachToParent in the creation/continuation options, but it does take a few cycles to validate that there is actually a parent, so don't call this when not needed.
            </summary>
            <param name="task"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.GetEventHandler(System.Threading.Tasks.Task,System.Type)">
            <summary>
                Gets the message handler.
            </summary>
            <param name="task"> The task to get the message handler for. </param>
            <param name="eventDelegateHandlerType"> the delegate handler class </param>
            <returns> A delegate handler; null if there isn't one. </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run(System.Action)">
            <summary>
            Creates a task that runs the specified action.
            </summary>
            <param name="action">The action to execute asynchronously.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates a task that runs the specified action.
            </summary>
            <param name="action">The action to execute.</param><param name="cancellationToken">The CancellationToken to use to request cancellation of this task.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run``1(System.Func{``0})">
            <summary>
            Creates a task that runs the specified function.
            </summary>
            <param name="function">The function to execute asynchronously.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a task that runs the specified function.
            </summary>
            <param name="function">The action to execute.</param><param name="cancellationToken">The CancellationToken to use to cancel the task.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates a task that runs the specified function.
            </summary>
            <param name="function">The action to execute asynchronously.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Creates a task that runs the specified function.
            </summary>
            <param name="function">The function to execute.</param><param name="cancellationToken">The CancellationToken to use to request cancellation of this task.</param>
            <returns>
            A task that represents the completion of the function.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a task that runs the specified function.
            </summary>
            <param name="function">The function to execute asynchronously.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Creates a task that runs the specified function.
            </summary>
            <param name="function">The action to execute.</param><param name="cancellationToken">The CancellationToken to use to cancel the task.</param>
            <returns>
            A task that represents the completion of the action.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="function"/> argument is null.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Delay(System.Int32)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The delay in milliseconds before the returned task completes.</param>
            <returns>
            The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
                        </exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Delay(System.TimeSpan)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The delay before the returned task completes.</param>
            <returns>
            The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
                        </exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Delay(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The delay before the returned task completes.</param><param name="cancellationToken">A CancellationToken that may be used to cancel the task before the due time occurs.</param>
            <returns>
            The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
                        </exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.Delay(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The delay in milliseconds before the returned task completes.</param><param name="cancellationToken">A CancellationToken that may be used to cancel the task before the due time occurs.</param>
            <returns>
            The timed Task.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> argument must be non-negative or -1 and less than or equal to Int32.MaxValue.
                        </exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAll(System.Threading.Tasks.Task[])">
            <summary>
            Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
            A Task that represents the completion of all of the provided tasks.
            </returns>
            
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                        about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                        Task will also be canceled.
            
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
            A Task that represents the completion of all of the provided tasks.
            </returns>
            
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                        about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                        Task will also be canceled.
            
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
            A Task that represents the completion of all of the provided tasks.
            </returns>
            
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                        about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                        Task will also be canceled.
            
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a Task that will complete only when all of the provided collection of Tasks has completed.
            </summary>
            <param name="tasks">The Tasks to monitor for completion.</param>
            <returns>
            A Task that represents the completion of all of the provided tasks.
            </returns>
            
            <remarks>
            If any of the provided Tasks faults, the returned Task will also fault, and its Exception will contain information
                        about all of the faulted tasks.  If no Tasks fault but one or more Tasks is canceled, the returned
                        Task will also be canceled.
            
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAny(System.Threading.Tasks.Task[])">
            <summary>
            Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            
            </returns>
            
            <remarks>
            Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            
            </returns>
            
            <remarks>
            Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
            <summary>
            Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            
            </returns>
            
            <remarks>
            Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a Task that will complete when any of the tasks in the provided collection completes.
            </summary>
            <param name="tasks">The Tasks to be monitored.</param>
            <returns>
            A Task that represents the completion of any of the provided Tasks.  The completed Task is this Task's result.
            
            </returns>
            
            <remarks>
            Any Tasks that fault will need to have their exceptions observed elsewhere.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tasks"/> argument is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="tasks"/> argument contains a null reference.</exception>
        </member>
        <member name="M:ClrPlus.Core.Tasks.XTask.FromResult``1(``0)">
            <summary>
            Creates an already completed <see cref="T:System.Threading.Tasks.Task`1"/> from the specified result.
            </summary>
            <param name="result">The result from which to create the completed task.</param>
            <returns>
            The completed task.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Tasks.EventSource.op_Addition(ClrPlus.Core.Tasks.EventSource,System.Delegate)">
            <summary>
                Adds an event handler delegate to the current tasktask
            </summary>
            <param name="eventSource"> </param>
            <param name="eventHandlerDelegate"> </param>
            <returns> </returns>
        </member>
        <member name="M:ClrPlus.Core.Tasks.Event`1.GetDelegateParameterTypes(System.Type)">
            <summary>
                Gets the parameter types of a Delegate
            </summary>
            <param name="d"> The d. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ClrPlus.Core.Tasks.Event`1.GetDelegateReturnType(System.Type)">
            <summary>
                Gets the Return type of a delegate
            </summary>
            <param name="d"> The d. </param>
            <returns> </returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:ClrPlus.Core.Tasks.Event`1.EmptyDelegate">
            <summary>
                Returns a delegate that does nothing, and returns default(T) that can be used without having to check to see if the delegate is null.
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Utility.AccessPrivateWrapper">
            <summary>
                A 10 minute wrapper to access private members, havn't tested in detail.
                Use under your own risk - amazedsaint@gmail.com
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Utility.AccessPrivateWrapper._wrapped">
            <summary>
                The object we are going to wrap
            </summary>
        </member>
        <member name="F:ClrPlus.Core.Utility.AccessPrivateWrapper.flags">
            <summary>
                Specify the flags for accessing members
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Utility.AccessPrivateWrapper.#ctor(System.Object)">
            <summary>
                Create a simple private wrapper
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Utility.AccessPrivateWrapper.FromType(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
                Create an instance via the constructor matching the args
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Utility.AccessPrivateWrapper.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
                Try invoking a method
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Utility.AccessPrivateWrapper.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
                Tries to get a property or field with the given name
            </summary>
        </member>
        <member name="M:ClrPlus.Core.Utility.AccessPrivateWrapper.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
                Tries to set a property or field with the given name
            </summary>
        </member>
        <member name="T:ClrPlus.Core.Utility.AsyncLazy`1">
            <summary>
                Provides support for lazy initialization in asyncronous manner.
            </summary>
            <typeparam name="T"> Specifies the type of object that is being lazily initialized. </typeparam>
        </member>
        <member name="M:ClrPlus.Core.Utility.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
                Initializes a new instance of the <see cref="!:AsyncLazy"/> class.
                When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <param name="valueFactory"> The delegate that is invoked to produce the lazily initialized value when it is needed. </param>
        </member>
        <member name="M:ClrPlus.Core.Utility.AsyncLazy`1.InitializeAsync">
            <summary>
                Initializes value on background thread.
                Calling thread will never be blocked.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Utility.AsyncLazy`1.Value">
            <summary>
                Gets the lazily initialized value of the current instance.
                If value have not been initialized, block calling thread until value get initialized.
                If during initialization exception have been thrown, it will wrapped into <see cref="T:System.AggregateException"/>
                and rethrowned on accessing this property.
            </summary>
        </member>
        <member name="P:ClrPlus.Core.Utility.AsyncLazy`1.IsValueCreated">
            <summary>
                Gets a value that indicates whether a value has been created for this instance.
            </summary>
            <value>
                <c>true</c> if a value has been created; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="M:ClrPlus.Core.Utility.HttpUtility.HtmlDecode(System.String)">
            <summary>
                Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s"> The HTML string to decode. </param>
            <returns> The decoded text. </returns>
        </member>
        <member name="M:ClrPlus.Core.Utility.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
                Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s"> The HTML string to decode </param>
            <param name="output"> The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:ClrPlus.Core.Utility.HttpUtility.HtmlEncode(System.String)">
            <summary>
                HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="s"> The text string to encode. </param>
            <returns> The HTML-encoded text. </returns>
        </member>
        <member name="M:ClrPlus.Core.Utility.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
                HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s"> The string to encode. </param>
            <param name="output"> The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="M:ClrPlus.Core.Utility.HttpUtility.ToBase64ForUrlString(System.Byte[])">
            <summary>
                Modified Base64 for URL applications ('base64url' encoding)
                See http://tools.ietf.org/html/rfc4648
                For more information see http://en.wikipedia.org/wiki/Base64
            </summary>
            <param name="input"></param>
            <returns>Input byte array converted to a base64ForUrl encoded string</returns>
        </member>
        <member name="M:ClrPlus.Core.Utility.HttpUtility.FromBase64ForUrlString(System.String)">
            <summary>
                Modified Base64 for URL applications ('base64url' encoding)
                See http://tools.ietf.org/html/rfc4648
                For more information see http://en.wikipedia.org/wiki/Base64
            </summary>
            <param name="base64ForUrlInput"></param>
            <returns>Input base64ForUrl encoded string as the original byte array</returns>
        </member>
        <member name="M:ClrPlus.Core.Utility.TextEncoding.GetTextEncoding(System.Byte[],System.Int32,System.Nullable{System.Int32})">
            <summary>
                Uses various discovery techniques to guess the encoding used for a byte buffer presumably containing text characters.
            </summary>
            <remarks>
                Note that this is only a guess and could be incorrect.  Be prepared to catch exceptions while using the
                <see cref="T:System.Text.Decoder"/>
                returned by
                the encoding returned by this method.
            </remarks>
            <param name="bytes"> The buffer containing the bytes to examine. </param>
            <param name="offset"> The offset into the buffer to begin examination, or 0 if not specified. </param>
            <param name="length"> The number of bytes to examine. </param>
            <returns>
                An encoding, or <see langword="null"/>if one cannot be determined.
            </returns>
        </member>
        <member name="M:ClrPlus.Core.Utility.TextEncoding.GetUtf8MultibyteRank(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Determines whether the bytes in this buffer at the specified offset represent a UTF-8 multi-byte character.
            </summary>
            <remarks>
                It is not guaranteed that these bytes represent a sensical character - only that the binary pattern matches UTF-8 encoding.
            </remarks>
            <param name="bytes"> This buffer. </param>
            <param name="offset"> The position in the buffer to check. </param>
            <param name="length"> The number of bytes to check, of 4 if not specified. </param>
            <returns> The rank of the UTF </returns>
        </member>
    </members>
</doc>
