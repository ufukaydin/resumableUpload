<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClrPlus.Powershell.Provider</name>
    </assembly>
    <members>
        <member name="T:ClrPlus.Powershell.Provider.Base.UniversalProvider`1">
            <summary>
                This is a template for a provider that hooks into the Windows
                PowerShell namespaces.  It contains all possible provider
                overrides and interfaces.  A provider developer should be able to copy
                this file, change its name, delete those interfaces and methods the
                provider doesn't need to implement/override and be on their way.
                The ProviderDeclaration attribute signifies to the Microsoft Command
                Shell that this class implements a CmdletProvider.  The first
                parameter is the default friendly name for the provider. The second
                parameter is the provider supported capabilities.
            </summary>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.StartDynamicParameters">
            <summary>
                Gets an object that defines the additional parameters for the
                Start implementation for a provider.
            </summary>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.Stop">
            <summary>
                Uninitialize the provider. Called by Session State when the provider
                is being removed.
            </summary>
            <remarks>
                This is the time to free up any resources that the provider
                was using. The default implementation in CmdletProvider does
                nothing.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewDriveDynamicParameters">
            <summary>
                Allows the provider to attach additional parameters to the
                New-PSDrive cmdlet.
            </summary>
            <returns>
                Implementors of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RemoveDrive(System.Management.Automation.PSDriveInfo)">
            <summary>
                Cleans up provider specific data for a drive before it is
                removed. This method gets called before a drive gets removed.
            </summary>
            <param name="drive"> The Drive object that represents the mounted drive. </param>
            <returns>
                If the drive can be removed then the drive that was passed in is returned. If the drive cannot be removed, null should be returned and an exception is written to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)"/>
                method. The default implementation returns the drive that was passed.
            </returns>
            <remarks>
                An implementer has to ensure that this method is overridden to free
                any resources that may be associated with the drive being removed.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.IsValidPath(System.String)">
            <summary>
                Determines if the specified path is syntactically and semantically
                valid.
            </summary>
            <param name="path"> The path to validate. </param>
            <returns> True if the path is syntactically and semantically valid for the provider, false otherwise. The default implementation checks if the path is not null or empty. </returns>
            <remarks>
                This test should not verify the existance of the item at the path.
                It should only perform syntactic and semantic validation of the
                path. For instance, for the file system provider, that path should
                be canonicalized, syntactically verified, and ensure that the path
                does not refer to a device.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ItemExists(System.String)">
            <summary>
                Determines if an item exists at the specified path.
            </summary>
            <param name="path"> The path to the item to see if it exists. </param>
            <returns> True if the item exists, false otherwise. </returns>
            <remarks>
                Providers can override this method to give the user the ability to
                check for the existence of provider objects using the test-path
                cmdlet. The default implementation returns false.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                The implemenation of this method should take into account any form
                of access to the object that may make it visible to the user.  For
                instance, if a user has write access to a file in the file system
                provider but not read access, the file still exists and the method
                should return true.  Sometimes this may require checking the parent
                to see if the child can be enumerated.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ItemExistsDynamicParameters(System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                test-path cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetItem(System.String)">
            <summary>
                Gets the item at the specified path.
            </summary>
            <param name="path"> The path to the item to retrieve. </param>
            <returns> Nothing is returned, but all objects will be written to the WriteItemObject method. </returns>
            <remarks>
                Providers can override this method to give the user access to the
                provider objects using the get-item and get-childitem cmdlets. All
                objects should be written to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteItemObject(System.Object,System.String,System.Boolean)"/>
                method.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default overrides of this method should not write objects that
                are generally hidden from the user unless the Force property is set
                to true. For instance, the FileSystem provider should not call
                WriteItemObject for hidden or system files unless the Force
                property is set to true.
                The default implementation of this method does nothing
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetItemDynamicParameters(System.String)">
            <summary>
                Allows the provider an opportunity to attach additional parameters
                to the get-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null. (no additional parameters)
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.SetItem(System.String,System.Object)">
            <summary>
                Sets the item specified by the path.
            </summary>
            <param name="path"> The path to the item to set. </param>
            <param name="value"> The value of the item specified by the path. </param>
            <remarks>
                The item that is set should be written to the
                <see cref="!:System.Management.Automation.Providers.CmdletProvider.WriteItemObject"/>
                method.
                Providers can override this method to give the user the ability to
                modify provider objects using the set-item cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not set or write
                objects that are generally hidden from the user unless the Force
                property is set to true. An error should be sent to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                The default implementation of this method throws an
                <see cref="T:System.Management.Automation.PSNotSupportedException"/>.
                This method should call ShouldProcess and check its return value
                before making any changes to the store this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.SetItemDynamicParameters(System.String,System.Object)">
            <summary>
                Allows the provider to attach additional parameters to the set-item
                cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="value"> The value of the item specified by the path. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ClearItem(System.String)">
            <summary>
                Clears the item specified by the path.
            </summary>
            <param name="path"> The path to the item to clear. </param>
            <remarks>
                Providers override this method to give the user the ability to
                clear provider objects using the clear-item cmdlet.
                The item that is cleared should be written to the
                <see cref="!:System.Management.Automation.Providers.CmdletProvider.WriteItemObject"/>
                method.
                This method should call
                <see cref="!:System.Management.Automation.Providers.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default overrides of this method should not clear or write
                objects that are generally hidden from the user unless the Force
                property is set to true. An error should be sent to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ClearItemDynamicParameters(System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                clear-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.InvokeDefaultAction(System.String)">
            <summary>
                Invokes the default action on the specified item.
            </summary>
            <param name="path"> The path to the item to perform the default action on. </param>
            <remarks>
                Providers can override this method to give the user the ability to
                invoke provider objects using the invoke-item cmdlet. Think of the
                invocation as a double click in the Windows Shell. This method
                provides a default action based on the path that was passed. For
                example, the File System provider may call ShellExecute on the
                path that is passed in.The default implementation does nothing.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not invoke objects that
                are generally hidden from the user unless the Force property is set
                to true. An error should be sent to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.InvokeDefaultActionDynamicParameters(System.String)">
            <summary>
                Gives the provider an opportunity to attach additional parameters to
                the invoke-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetChildItems(System.String,System.Boolean)">
            <summary>
                Gets the children of the item at the specified path.
            </summary>
            <param name="path"> The path (or name in a flat namespace) to the item from which to retrieve the children. </param>
            <param name="recurse"> True if all children in a subtree should be retrieved, false if only a single level of children should be retrieved. </param>
            <remarks>
                Providers override this method to give the user access to the
                provider objects using the get-childitem cmdlets.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not write objects that
                are generally hidden from the user unless the Force property is set
                to true. For instance, the FileSystem provider should
                not call WriteItemObject for hidden or system files unless the Force
                property is set to true.
                The provider implementation is responsible for preventing infinite
                recursion when there are circular links and the like. An
                appropriate terminating exception should be thrown if this
                situation occurs.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetChildItemsDynamicParameters(System.String,System.Boolean)">
            <summary>
                Allows the provider to attach additional parameters to the
                get-childitem cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="recurse"> True if all children in a subtree should be retrieved, false if only a single level of children should be retrieved. In either case, only leaf items that match the filter should be returned. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetChildNames(System.String,System.Management.Automation.ReturnContainers)">
            <summary>
                Gets names of the children of the specified path.
            </summary>
            <param name="path"> The path to the item from which to retrieve the child names. </param>
            <param name="returnAllContainers"> If true, the provider should return all containers, even if they don't match the filter. If false, the provider should only return containers that do match the filter. </param>
            <remarks>
                Providers override this method to give the user access to the
                provider objects using the get-childitem -name cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class. The exception to this is
                if <paramref name="returnAllContainers"/> is true, then any child
                name for a container should be returned even if it doesn't match
                the Filter, Include, or Exclude.
                By default overrides of this method should not write the names of
                objects that are generally hidden from the user unless the Force
                property is set to true. For instance, the FileSystem provider
                should not call WriteItemObject for hidden or system files unless
                the Force property is set to true.
                The provider implementation is responsible for preventing infinite
                recursion when there are circular links and the like. An
                appropriate terminating exception should be thrown if this
                situation occurs.
                The child names are the leaf portion of the path. Example, for the
                file system the name for the path c:\windows\system32\foo.dll would
                be foo.dll or for the directory c:\windows\system32 would be
                system32.  For Active Directory the child names would be RDN values
                of the child objects of the container.
                All names should be written to the WriteItemObject method.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetChildNamesDynamicParameters(System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                get-childitem -name cmdlet.
            </summary>
            <param name="path">
                If the path was specified on the command line, this is the path
                to the item to get the dynamic parameters for.
            </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RenameItem(System.String,System.String)">
            <summary>
                Renames the item at the specified path to the new name provided.
            </summary>
            <param name="path"> The path to the item to rename. </param>
            <param name="newName"> The name to which the item should be renamed. This name should always be relative to the parent container. </param>
            <remarks>
                Providers override this method to give the user the ability to
                rename provider objects using the rename-item cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default overrides of this method should not allow renaming
                objects that are generally hidden from the user unless the Force
                property is set to true. For instance, the FileSystem provider
                should not allow renaming of a hidden or system file unless the
                Force property is set to true.
                This method is intended for the modification of the item's name
                only and not for Move operations. An error should be written to
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)"/> if the
                <paramref name="newName"/> parameter contains path separators or
                would cause the item to change its parent location.
                All renamed items should be written to the WriteItemObject.
                This method should call ShouldProcess and check its return value
                before making any changes to the store this provider is working
                upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RenameItemDynamicParameters(System.String,System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                rename-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="newName"> The name to which the item should be renamed. This name should always be relative to the parent container. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewItem(System.String,System.String,System.Object)">
            <summary>
                Creates a new item at the specified path.
            </summary>
            <param name="path"> The path to the item to create. </param>
            <param name="type"> The provider defined type for the object to create. </param>
            <param name="newItemValue"> This is a provider specific type that the provider can use to create a new instance of an item at the specified path. </param>
            <remarks>
                Providers override this method to give the user the ability to
                create new provider objects using the new-item cmdlet.
                The <paramref name="type"/> parameter is a provider specific
                string that the user specifies to tell the provider what type of
                object to create.  For instance, in the FileSystem provider the
                <paramref name="type"/> parameter can take a value of "file" or
                "directory". The comparison of this string should be
                case-insensitive and you should also allow for least ambiguous
                matches. So if the provider allows for the types "file" and
                "directory", only the first letter is required to disambiguate.
                If <paramref name="type"/> refers to a type the provider cannot
                create, the provider should produce an
                <see cref="T:System.ArgumentException"/> with a message indicating the
                types the provider can create.
                The <paramref name="newItemValue"/> parameter can be any type of
                object that the provider can use to create the item. It is
                recommended that the provider accept at a minimum strings, and an
                instance of the type of object that would be returned from
                GetItem() for this path.
                <see cref="M:System.Management.Automation.LanguagePrimitives.ConvertTo(System.Object,System.Type)"/>
                can be used to convert some types to the desired type.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewItemDynamicParameters(System.String,System.String,System.Object)">
            <summary>
                Allows the provider to attach additional parameters to the
                new-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="type"> The provider defined type of the item to create. </param>
            <param name="newItemValue"> This is a provider specific type that the provider can use to create a new instance of an item at the specified path. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RemoveItem(System.String,System.Boolean)">
            <summary>
                Removes (deletes) the item at the specified path
            </summary>
            <param name="path"> The path to the item to remove. </param>
            <param name="recurse"> True if all children in a subtree should be removed, false if only the item at the specified path should be removed. </param>
            <remarks>
                Providers override this method to allow the user the ability to
                remove provider objects using the remove-item cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not remove objects that
                are generally hidden from the user unless the Force property is set
                to true. For instance, the FileSystem provider should not remove a
                hidden or system file unless the Force property is set to true.
                The provider implementation is responsible for preventing infinite
                recursion when there are circular links and the like. An
                appropriate terminating exception should be thrown if this
                situation occurs.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RemoveItemDynamicParameters(System.String,System.Boolean)">
            <summary>
                Allows the provider to attach additional parameters to
                the remove-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="recurse"> True if all children in a subtree should be removed, false if only a single level of children should be removed. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.HasChildItems(System.String)">
            <summary>
                Determines if the item at the specified path has children.
            </summary>
            <param name="path"> The path to the item to see if it has children. </param>
            <returns> True if the item has children, false otherwise. </returns>
            <remarks>
                Providers override this method to give the provider infrastructure
                the ability to determine if a particular provider object has
                children without having to retrieve all the child items.
                For providers that are derived from
                <see cref="T:System.Management.Automation.Provider.ContainerCmdletProvider"/> class, if a null or empty
                path is passed, the provider should consider any items in the data
                store to be children and return true.
                If this provider exposes a root that contains interesting mount
                points (as described in InitializeDefaultDrives) it should return
                true when null or String.Empty is passed.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.CopyItem(System.String,System.String,System.Boolean)">
            <summary>
                Copies an item at the specified path to an item at the
                <paramref name="copyPath"/>.
            </summary>
            <param name="path"> The path of the item to copy. </param>
            <param name="copyPath"> The path of the item to copy to. </param>
            <param name="recurse"> Tells the provider to recurse sub-containers when copying. </param>
            <remarks>
                Providers override this method to give the user the ability to copy
                provider objects using the copy-item cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path and items being copied meets those requirements by
                accessing the appropriate property from the base class.
                By default, overrides of this method should not copy objects over
                existing items unless the Force property is set to true. For
                instance, the FileSystem provider should not copy c:\temp\foo.txt
                over c:\bar.txt if c:\bar.txt already exists unless the Force
                parameter is true.
                If <paramref name="copyPath"/> exists and is a container then Force
                isn't required and <paramref name="path"/> should be copied into
                the <paramref name="copyPath"/> container as a child.
                If <paramref name="recurse"/> is true, the provider implementation
                is responsible for preventing infinite recursion when there are
                circular links and the like. An appropriate terminating exception
                should be thrown if this situation occurs.
                This method should call
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.ShouldProcess(System.String)"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.CopyItemDynamicParameters(System.String,System.String,System.Boolean)">
            <summary>
                Allows the provider to attach additional parameters to the
                copy-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="destination"> The path of the item to copy to. </param>
            <param name="recurse"> Tells the provider to recurse sub-containers when copying. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                .
            </returns>
            <remarks>
                The default implemenation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.MakePath(System.String,System.String)">
            <summary>
                Joins two strings with a provider specific path separator.
            </summary>
            <param name="parent"> The parent segment of a path to be joined with the child. </param>
            <param name="child"> The child segment of a path to be joined with the parent. </param>
            <returns> A string that represents the parent and child segments of the path joined by a path separator. </returns>
            <remarks>
                This method should use lexical joining of two path segments with a
                path separator character.  It should not validate the path as a
                legal fully qualified path in the provider namespace as each
                parameter could be only partial segments of a path and joined
                they may not generate a fully qualified path.
                Example: the file system provider may get "windows\system32" as
                the parent parameter and "foo.dll" as the child parameter. The
                method should join these with the "\" separator and return
                "windows\system32\foo.dll". Note that the returned path is not a
                fully qualified file system path.
                Also beware that the path segments may contain characters that are
                illegal in the provider namespace. These characters are most
                likely used as wildcards and should not be removed by the
                implementation of this method.
                The default implementation will take paths with '/' or '\' as the
                path separator and normalize the path separator to '\' and then
                join the child and parent with a '\'.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetParentPath(System.String,System.String)">
            <summary>
                Removes the child segment of a path and returns the remaining
                parent portion.
            </summary>
            <param name="path"> A full or partial provider specific path. The path may be to an item that may or may not exist. </param>
            <param name="root"> The fully qualified path to the root of a drive. This parameter may be null or empty if a mounted drive is not in use for this operation. If this parameter is not null or empty the result of the method should not be a path to a container that is a parent or in a different tree than the root. </param>
            <returns> The path of the parent of the path parameter. </returns>
            <remarks>
                This should be a lexical splitting of the path on the path
                separator character for the provider namespace.  For example, the
                file system provider should look for the last "\" and return
                everything to the left of the "\".
                The default implementation accepts paths that have both '/' and
                '\' as the path separator. It first normalizes the path to have
                only '\' separators and then splits the parent path off at the
                last '\' and returns it.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetChildName(System.String)">
            <summary>
                Gets the name of the leaf element in the specified path.
            </summary>
            <param name="path"> The full or partial provider specific path. </param>
            <returns> The leaf element in the path. </returns>
            <remarks>
                This should be implemented as a split on the path separator.  The
                characters in the fullPath may not be legal characters in the
                namespace but may be used for wildcards or regular expression
                matching.  If the path contains no path separators the path should
                be returned unmodified.
                The default implementation accepts paths that have both '/' and
                '\' as the path separator. It first normalizes the path to have
                only '\' separators and then splits the parent path off at the
                last '\' and returns it.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.IsItemContainer(System.String)">
            <summary>
                Determines if the specified object is a container
            </summary>
            <param name="path"> The path to the item to determine if it is a container. </param>
            <returns> true if the item specified by path exists and is a container, false otherwise. </returns>
            <remarks>
                Providers override this method to give the user the ability to
                check to see if a provider object is a container using the
                test-path -container cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.MoveItem(System.String,System.String)">
            <summary>
                Moves the item specified by path to the specified destination.
            </summary>
            <param name="path"> The path to the item to be moved. </param>
            <param name="destination"> The path of the destination container. </param>
            <remarks>
                Providers override this method to give the user the ability to move
                provider objects using the move-item cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path and items being moved meets those requirements by accessing
                the appropriate property from the base class.
                By default overrides of this method should not move objects over
                existing items unless the Force property is set to true. For
                instance, the FileSystem provider should not move c:\temp\foo.txt
                over c:\bar.txt if c:\bar.txt already exists unless the Force
                parameter is true.
                If <paramref name="destination"/> exists and is a container then
                Force isn't required and <paramref name="path"/> should be moved
                into the <paramref name="destination"/> container as a child.
                All objects that are moved should be written to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteItemObject(System.Object,System.String,System.Boolean)"/>
                method.
                This method should call
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.ShouldProcess(System.String)"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.MoveItemDynamicParameters(System.String,System.String)">
            <summary>
                Allows the provider to attach additional parameters to
                the move-item cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="destination"> The path of the destination container. </param>
            <returns>
                Overrides of this method should return an object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . The default implemenation returns null.
            </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NormalizeRelativePath(System.String,System.String)">
            <summary>
                Normalizes the path that was passed in and returns the normalized
                path as a relative path to the basePath that was passed.
            </summary>
            <param name="path"> A fully qualified provider specific path to an item. The item should exist or the provider should write out an error. </param>
            <param name="basePath"> The path that the return value should be relative to. </param>
            <returns> A normalized path that is relative to the basePath that was passed. The provider should parse the path parameter, normalize the path, and then return the normalized path relative to the basePath. </returns>
            <remarks>
                This method does not have to be purely syntactical parsing of the
                path.  It is encouraged that the provider actually use the path to
                lookup in its store and create a relative path that matches the
                casing, and standardized path syntax.
                Note, the base class implemenation uses GetParentPath,
                GetChildName, and MakePath to normalize the path and then make it
                relative to basePath.  All string comparisons are done using
                StringComparison.InvariantCultureIgnoreCase.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetContentReader(System.String)">
            <summary>
                Gets an IContentReader from the provider for the item at the
                specified path.
            </summary>
            <param name="path"> The path to the object to be opened for reading content. </param>
            <returns> An IContentReader for the specified content. </returns>
            <remarks>
                Overrides of this method should return an
                <see cref="T:System.Management.Automation.Provider.IContentReader"/>
                for the item specified by the path.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not return a content
                reader for objects that are generally hidden from the user unless
                the Force property is set to true. An error should be sent to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WriteError(System.Management.Automation.ErrorRecord)"/>
                method if
                the path represents an item that is hidden from the user and Force
                is set to false.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetContentReaderDynamicParameters(System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                get-content cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                .
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetContentWriter(System.String)">
            <summary>
                Gets an IContentWriter from the provider for the content at the
                specified path.
            </summary>
            <param name="path"> The path to the object to be opened for writing content. </param>
            <returns> An IContentWriter for the item at the specified path. </returns>
            <remarks>
                Overrides of this method should return an
                <see cref="T:System.Management.Automation.Provider.IContentWriter"/>
                for the item specified by the path.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not return a content
                writer for objects that are generally hidden from
                the user unless the Force property is set to true. An error should
                be sent to the WriteError method if the path represents an item
                that is hidden from the user and Force is set to false.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetContentWriterDynamicParameters(System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                set-content and add-content cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns> An object that has properties and fields decorated with parsing attributes similar to a cmdlet class. </returns>
            <remarks>
                The default implementation will returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ClearContent(System.String)">
            <summary>
                Clears the content from the specified item.
            </summary>
            <param name="path"> The path to the item to clear the content from. </param>
            <remarks>
                Overrides of this method should remove any content from the object
                but not remove (delete) the object itself.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not clear or write
                objects that are generally hidden from the user unless the Force
                property is set to true. An error should be sent to the WriteError
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                This method should call
                <see cref="!:System.Management.Automation.Providers.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ClearContentDynamicParameters(System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                clear-content cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                .
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetProperty(System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
                Gets the properties of the item specified by the path.
            </summary>
            <param name="path"> The path to the item to retrieve properties from. </param>
            <param name="providerSpecificPickList"> A list of properties that should be retrieved. If this parameter is null or empty, all properties should be retrieved. </param>
            <remarks>
                Providers override this method to give the user the ability to
                retrieve properties to provider objects using the get-itemproperty
                cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not retrieve properties
                from objects that are generally hidden from the user unless the
                Force property is set to true. An error should be sent to the
                <see cref="!:System.Management.Automation.CmdletProvier.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                An <see cref="T:System.Management.Automation.PSObject"/> can be used
                as a property bag for the properties that need to be returned if
                the <paramref name="providerSpecificPickList"/> contains multiple
                properties to get.
                An instance of <see cref="T:System.Management.Automation.PSObject"/>
                representing the properties that were retrieved should be passed
                to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WritePropertyObject(System.Object,System.String)"/>
                method.
                It is recommended that you support wildcards in property names
                using <see cref="T:System.Management.Automation.WildcardPattern"/>.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetPropertyDynamicParameters(System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
                Allows the provider to attach additional parameters to the
                get-itemproperty cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="providerSpecificPickList"> A list of properties that were specified on the command line. This parameter may be empty or null if the properties are being piped into the command. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.SetProperty(System.String,System.Management.Automation.PSObject)">
            <summary>
                Sets the specified properties of the item at the specified path.
            </summary>
            <param name="path"> The path to the item to set the properties on. </param>
            <param name="propertyValue"> An PSObject which contains a collection of the names and values of the properties to be set. </param>
            <remarks>
                Providers override this method to give the user the ability to set
                the value of provider object properties using the set-itemproperty
                cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not retrieve properties
                from objects that are generally hidden from the user unless the
                Force property is set to true. An error should be sent to the
                WriteError
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                An instance of <see cref="T:System.Management.Automation.PSObject"/>
                representing the properties that were set should be passed
                to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WritePropertyObject(System.Object,System.String)"/>
                method.
                <paramref name="propertyValue"/> is a property bag containing the
                properties that should be set. See
                <see cref="T:System.Management.Automation.PSObject"/> for more
                information.
                This method should call
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.ShouldProcess(System.String)"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.SetPropertyDynamicParameters(System.String,System.Management.Automation.PSObject)">
            <summary>
                Allows the provider to attach additional parameters to the
                set-itemproperty cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="propertyValue"> An PSObject which contains a collection of the name, and value of the properties to be set if they were specified on the command line. The PSObject could be empty or null if the parameters are being piped into the command. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ClearProperty(System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
                Clears a property of the item at the specified path.
            </summary>
            <param name="path"> The path to the item on which to clear the property. </param>
            <param name="propertyToClear"> The name of the property to clear. </param>
            <remarks>
                Providers override this method to give the user the ability to clear
                the value of provider object properties using the clear-itemproperty
                cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not clear properties
                from objects that are generally hidden from the user unless the
                Force property is set to true. An error should be sent to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                An <see cref="T:System.Management.Automation.PSObject"/> can be used
                as a property bag for the properties that need to be returned if
                the <paramref name="propertyToClear"/> contains multiple
                properties to write.
                An instance of <see cref="T:System.Management.Automation.PSObject"/>
                representing the properties that were cleared should be passed
                to the
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.WritePropertyObject(System.Object,System.String)"/>
                method.
                This method should call
                <see cref="M:System.Management.Automation.Provider.CmdletProvider.ShouldProcess(System.String)"/>
                and check its return value before making any changes to the store this provider is
                working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.ClearPropertyDynamicParameters(System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
                Allows the provider to attach additional parameters to the
                clear-itemproperty cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="propertyToClear"> The name of the property to clear. This parameter may be null or empty if the properties to clear are being piped into the command. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.CopyProperty(System.String,System.String,System.String,System.String)">
            <summary>
                Copies a property of the item at the specified path to a new
                property on the destination item.
            </summary>
            <param name="sourcePath"> The path to the item from which to copy the property. </param>
            <param name="sourceProperty"> The name of the property to copy. </param>
            <param name="destinationPath"> The path to the item on which to copy the property to. </param>
            <param name="destinationProperty"> The destination property to copy to. </param>
            <remarks>
                Providers override this method to give the user the ability to copy
                properties of provider objects using the copy-itemproperty cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not copy properties
                from or to objects that are generally hidden from the user unless
                the Force property is set to true. An error should be sent to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.CopyPropertyDynamicParameters(System.String,System.String,System.String,System.String)">
            <summary>
                Allows the provider a attach additional parameters to the
                copy-itemproperty cmdlet.
            </summary>
            <param name="sourcePath"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="sourceProperty"> The name of the property to copy. </param>
            <param name="destinationPath"> The path to the item on which to copy the property to. </param>
            <param name="destinationProperty"> The destination property to copy to. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.MoveProperty(System.String,System.String,System.String,System.String)">
            <summary>
                Moves a property on an item specified by the path.
            </summary>
            <param name="sourcePath"> The path to the item from which to move the property. </param>
            <param name="sourceProperty"> The name of the property to move. </param>
            <param name="destinationPath"> The path to the item on which to move the property to. </param>
            <param name="destinationProperty"> The destination property to move to. </param>
            <remarks>
                Providers override this method to give the user the ability to move
                properties from one provider object to another using the move-itemproperty cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not move properties on
                or to objects that are generally hidden from the user unless the
                Force property is set to true. An error should be sent to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.MovePropertyDynamicParameters(System.String,System.String,System.String,System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                move-itemproperty cmdlet.
            </summary>
            <param name="sourcePath"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="sourceProperty"> The name of the property to move. </param>
            <param name="destinationPath"> The path to the item on which to move the property to. </param>
            <param name="destinationProperty"> The destination property to move to. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewProperty(System.String,System.String,System.String,System.Object)">
            <summary>
                Creates a new property on the specified item
            </summary>
            <param name="path"> The path to the item on which the new property should be created. </param>
            <param name="propertyName"> The name of the property that should be created. </param>
            <param name="type"> The type of the property that should be created. </param>
            <param name="value"> The new value of the property that should be created. </param>
            <remarks>
                Providers override this method to give the user the ability to add
                properties to provider objects using the new-itemproperty cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not create new
                properties on objects that are generally hidden from the user unless
                the Force property is set to true. An error should be sent to the
                <see cref="!:Sytem.Management.Automation.CmdletProvider.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewPropertyDynamicParameters(System.String,System.String,System.String,System.Object)">
            <summary>
                Allows the provider to attach additional parameters to the
                new-itemproperty cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="propertyName"> The name of the property that should be created. </param>
            <param name="type"> The type of the property that should be created. </param>
            <param name="value"> The new value of the property that should be created. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RemoveProperty(System.String,System.String)">
            <summary>
                Removes a property on the item specified by the path.
            </summary>
            <param name="path"> The path to the item from which the property should be removed. </param>
            <param name="propertyName"> The name of the property to be removed. </param>
            <remarks>
                Providers override this method to give the user the ability to
                remove properties from provider objects using the remove-itemproperty
                cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not remove properties
                on objects that are generally hidden from the user unless the Force
                property is set to true. An error should be sent to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                This method should call
                <see cref="!:System.Management.Automatin.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RemovePropertyDynamicParameters(System.String,System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                remove-itemproperty cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="propertyName"> The name of the property that should be removed. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RenameProperty(System.String,System.String,System.String)">
            <summary>
                Renames a property of the item at the specified path
            </summary>
            <param name="path"> The path to the item on which to rename the property. </param>
            <param name="sourceProperty"> The property to rename. </param>
            <param name="destinationProperty"> The new name of the property. </param>
            <remarks>
                Providers override this method to give the user the ability to
                rename properties of provider objects using the rename-itemproperty
                cmdlet.
                Providers that declare
                <see cref="T:System.Management.Automation.Provider.ProviderCapabilities"/>
                of ExpandWildcards, Filter, Include, or Exclude should ensure that
                the path passed meets those requirements by accessing the
                appropriate property from the base class.
                By default, overrides of this method should not rename properties
                on objects that are generally hidden from the user unless the Force
                property is set to true. An error should be sent to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteError"/>
                method if the path represents an item that is hidden from the user
                and Force is set to false.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.RenamePropertyDynamicParameters(System.String,System.String,System.String)">
            <summary>
                Allows the provider to attach additional parameters to the
                rename-itemproperty cmdlet.
            </summary>
            <param name="path"> If the path was specified on the command line, this is the path to the item to get the dynamic parameters for. </param>
            <param name="sourceProperty"> The property to rename. </param>
            <param name="destinationProperty"> The new name of the property. </param>
            <returns>
                An object that has properties and fields decorated with parsing attributes similar to a cmdlet class or a
                <see cref="!:System.Management.Automation.PseudoParameterDictionary"/>
                . Null can be returned if no dynamic parameters are to be added.
            </returns>
            <remarks>
                The default implementation returns null.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.GetSecurityDescriptor(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
                When implemented, gets the security descriptor for the item
                specified by the path.
            </summary>
            <param name="path"> The path to the item to retrieve the security descriptor from. </param>
            <param name="sections"> Specifies the parts of a security descriptor to retrieve. </param>
            <remarks>
                An instance of an object that represents the security descriptor
                for the item specifed by the path should be written to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteSecurityDescriptorObject"/>
                method.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.SetSecurityDescriptor(System.String,System.Security.AccessControl.ObjectSecurity)">
            <summary>
                Sets the security descriptor for the item specified by the path.
            </summary>
            <param name="path"> The path to the item to set the new security descriptor on. </param>
            <param name="securityDescriptor"> The new security descriptor for the item. </param>
            <remarks>
                An instance of an object that represents the security descriptor
                for the item specifed by the path should be written to the
                <see cref="!:System.Management.Automation.CmdletProvider.WriteSecurityDescriptorObject"/>
                method.
                This method should call
                <see cref="!:System.Management.Automation.CmdletProvider.ShouldProcess"/>
                and check its return value before making any changes to the store
                this provider is working upon.
            </remarks>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewSecurityDescriptorFromPath(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
                Creates a new empty security descriptor of type specified by the
                path. For example, if path points to a file system directory,
                the descriptor returned will be of type DirectorySecurity.
            </summary>
            <param name="path"> The path to the item whose type is to be used when creating a new descriptor </param>
            <param name="sections"> Specifies the parts of a security descriptor to create. </param>
            <returns> A new ObjectSecurity object of the same type as the item specified by the path. </returns>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Base.UniversalProvider`1.NewSecurityDescriptorOfType(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
                Creates a new empty security descriptor of the specified type.
                This method is used as a convenience function for consumers of
                your provider.
            </summary>
            <param name="type"> The type of Security Descriptor to create. Your provider should understand a string representation for each of the types of SecurityDescriptors that it supports. For example, the File System provider performs a case-insensitive comparison against "file" for a FileSecurity descriptor, and "directory" or "container" for a DirectorySecurity descriptor. </param>
            <param name="sections"> Specifies the parts of a security descriptor to create. </param>
            <returns> A new ObjectSecurity object of the specified type. </returns>
        </member>
        <member name="T:ClrPlus.Powershell.Provider.Utility.ProgressStream">
            <summary>
                Wraps another stream and provides reporting for when bytes are read or written to the stream.
            </summary>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Utility.ProgressStream.#ctor(System.IO.Stream)">
            <summary>
                Creates a new ProgressStream supplying the stream for it to report on.
            </summary>
            <param name="streamToReportOn"> The underlying stream that will be reported on when bytes are read or written. </param>
        </member>
        <member name="E:ClrPlus.Powershell.Provider.Utility.ProgressStream.BytesRead">
            <summary>
                Raised when bytes are read from the stream.
            </summary>
        </member>
        <member name="E:ClrPlus.Powershell.Provider.Utility.ProgressStream.BytesWritten">
            <summary>
                Raised when bytes are written to the stream.
            </summary>
        </member>
        <member name="E:ClrPlus.Powershell.Provider.Utility.ProgressStream.BytesMoved">
            <summary>
                Raised when bytes are either read or written to the stream.
            </summary>
        </member>
        <member name="T:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportDelegate">
            <summary>
                The delegate for handling a ProgressStream Report event.
            </summary>
            <param name="sender"> The object that raised the event, should be a ProgressStream. </param>
            <param name="args"> The arguments raised with the event. </param>
        </member>
        <member name="T:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs">
            <summary>
                Contains the pertinent data for a ProgressStream Report event.
            </summary>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs.#ctor">
            <summary>
                Default constructor for ProgressStreamReportEventArgs.
            </summary>
        </member>
        <member name="M:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs.#ctor(System.Int32,System.Int64,System.Int64,System.Boolean)">
            <summary>
                Creates a new ProgressStreamReportEventArgs initializing its members.
            </summary>
            <param name="bytesMoved"> The number of bytes that were read/written to/from the stream. </param>
            <param name="streamLength"> The total length of the stream in bytes. </param>
            <param name="streamPosition"> The current position in the stream. </param>
            <param name="wasRead"> True if the bytes were read from the stream, false if they were written. </param>
        </member>
        <member name="P:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs.BytesMoved">
            <summary>
                The number of bytes that were read/written to/from the stream.
            </summary>
        </member>
        <member name="P:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs.StreamLength">
            <summary>
                The total length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs.StreamPosition">
            <summary>
                The current position in the stream.
            </summary>
        </member>
        <member name="P:ClrPlus.Powershell.Provider.Utility.ProgressStreamReportEventArgs.WasRead">
            <summary>
                True if the bytes were read from the stream, false if they were written.
            </summary>
        </member>
    </members>
</doc>
