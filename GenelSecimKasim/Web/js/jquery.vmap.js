!function ($) { var apiParams = { colors: 1, values: 1, backgroundColor: 1, scaleColors: 1, normalizeFunction: 1, enableZoom: 1, showTooltip: 1, borderColor: 1, borderWidth: 1, borderOpacity: 1, selectedRegions: 1, multiSelectRegion: 1 }, apiEvents = { onLabelShow: "labelShow", onRegionOver: "regionMouseOver", onRegionOut: "regionMouseOut", onRegionClick: "regionClick", onRegionSelect: "regionSelect", onRegionDeselect: "regionDeselect" }; $.fn.vectorMap = function (t) { var e = { map: "world_en", backgroundColor: "rgb(248,249,249)", color: "#f4f3f0", hoverColor: "#c9dfaf", selectedColor: "#c9dfaf", scaleColors: ["#b6d6ff", "#005ace"], normalizeFunction: "linear", enableZoom: !0, showTooltip: !0, borderColor: "#818181", borderWidth: 1, borderOpacity: .25, selectedRegions: null, multiSelectRegion: !1 }, i = this.data("mapObject"); if ("addMap" === t) WorldMap.maps[arguments[1]] = arguments[2]; else if ("set" === t && apiParams[arguments[1]]) i["set" + arguments[1].charAt(0).toUpperCase() + arguments[1].substr(1)].apply(i, Array.prototype.slice.call(arguments, 2)); else { if ("string" == typeof t && "function" == typeof i[t]) return i[t].apply(i, Array.prototype.slice.call(arguments, 1)); $.extend(e, t), e.container = this, this.css({ position: "relative", overflow: "hidden" }), i = new WorldMap(e), this.data("mapObject", i); for (var s in apiEvents) e[s] && this.bind(apiEvents[s] + ".jqvmap", e[s]) } }; var VectorCanvas = function (t, e, i) { if (this.mode = window.SVGAngle ? "svg" : "vml", this.params = i, "svg" == this.mode) this.createSvgNode = function (t) { return document.createElementNS(this.svgns, t) }; else { try { document.namespaces.rvml || document.namespaces.add("rvml", "urn:schemas-microsoft-com:vml"), this.createVmlNode = function (t) { return document.createElement("<rvml:" + t + ' class="rvml">') } } catch (s) { this.createVmlNode = function (t) { return document.createElement("<" + t + ' xmlns="urn:schemas-microsoft.com:vml" class="rvml">') } } document.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)") } "svg" == this.mode ? this.canvas = this.createSvgNode("svg") : (this.canvas = this.createVmlNode("group"), this.canvas.style.position = "absolute"), this.setSize(t, e) }; VectorCanvas.prototype = { svgns: "http://www.w3.org/2000/svg", mode: "svg", width: 0, height: 0, canvas: null, setSize: function (t, e) { if ("svg" == this.mode) this.canvas.setAttribute("width", t), this.canvas.setAttribute("height", e); else if (this.canvas.style.width = t + "px", this.canvas.style.height = e + "px", this.canvas.coordsize = t + " " + e, this.canvas.coordorigin = "0 0", this.rootGroup) { for (var i = this.rootGroup.getElementsByTagName("shape"), s = 0, o = i.length; o > s; s++) i[s].coordsize = t + " " + e, i[s].style.width = t + "px", i[s].style.height = e + "px"; this.rootGroup.coordsize = t + " " + e, this.rootGroup.style.width = t + "px", this.rootGroup.style.height = e + "px" } this.width = t, this.height = e }, createPath: function (t) { var e; if ("svg" == this.mode) e = this.createSvgNode("path"), e.setAttribute("d", t.path), null !== this.params.borderColor && e.setAttribute("stroke", this.params.borderColor), this.params.borderWidth > 0 && (e.setAttribute("stroke-width", this.params.borderWidth), e.setAttribute("stroke-linecap", "round"), e.setAttribute("stroke-linejoin", "round")), this.params.borderOpacity > 0 && e.setAttribute("stroke-opacity", this.params.borderOpacity), e.setFill = function (t) { this.setAttribute("fill", t), null === this.getAttribute("original") && this.setAttribute("original", t) }, e.getFill = function () { return this.getAttribute("fill") }, e.getOriginalFill = function () { return this.getAttribute("original") }, e.setOpacity = function (t) { this.setAttribute("fill-opacity", t) }; else { e = this.createVmlNode("shape"), e.coordorigin = "0 0", e.coordsize = this.width + " " + this.height, e.style.width = this.width + "px", e.style.height = this.height + "px", e.fillcolor = WorldMap.defaultFillColor, e.stroked = !1, e.path = VectorCanvas.pathSvgToVml(t.path); var i = this.createVmlNode("skew"); i.on = !0, i.matrix = "0.01,0,0,0.01,0,0", i.offset = "0,0", e.appendChild(i); var s = this.createVmlNode("fill"); e.appendChild(s), e.setFill = function (t) { this.getElementsByTagName("fill")[0].color = t, null === this.getAttribute("original") && this.setAttribute("original", t) }, e.getFill = function () { return this.getElementsByTagName("fill")[0].color }, e.getOriginalFill = function () { return this.getAttribute("original") }, e.setOpacity = function (t) { this.getElementsByTagName("fill")[0].opacity = parseInt(100 * t, 10) + "%" } } return e }, createGroup: function (t) { var e; return "svg" == this.mode ? e = this.createSvgNode("g") : (e = this.createVmlNode("group"), e.style.width = this.width + "px", e.style.height = this.height + "px", e.style.left = "0px", e.style.top = "0px", e.coordorigin = "0 0", e.coordsize = this.width + " " + this.height), t && (this.rootGroup = e), e }, applyTransformParams: function (t, e, i) { "svg" == this.mode ? this.rootGroup.setAttribute("transform", "scale(" + t + ") translate(" + e + ", " + i + ")") : (this.rootGroup.coordorigin = this.width - e + "," + (this.height - i), this.rootGroup.coordsize = this.width / t + "," + this.height / t) } }, VectorCanvas.pathSvgToVml = function (t) { var e, i, s = 0, o = 0; return t.replace(/([MmLlHhVvCcSs])((?:-?(?:\d+)?(?:\.\d+)?,?\s?)+)/g, function (t, r, n) { n = n.replace(/(\d)-/g, "$1,-").replace(/\s+/g, ",").split(","), n[0] || n.shift(); for (var a = 0, l = n.length; l > a; a++) n[a] = Math.round(100 * n[a]); switch (r) { case "m": return s += n[0], o += n[1], "t" + n.join(","); case "M": return s = n[0], o = n[1], "m" + n.join(","); case "l": return s += n[0], o += n[1], "r" + n.join(","); case "L": return s = n[0], o = n[1], "l" + n.join(","); case "h": return s += n[0], "r" + n[0] + ",0"; case "H": return s = n[0], "l" + s + "," + o; case "v": return o += n[0], "r0," + n[0]; case "V": return o = n[0], "l" + s + "," + o; case "c": return e = s + n[n.length - 4], i = o + n[n.length - 3], s += n[n.length - 2], o += n[n.length - 1], "v" + n.join(","); case "C": return e = n[n.length - 4], i = n[n.length - 3], s = n[n.length - 2], o = n[n.length - 1], "c" + n.join(","); case "s": return n.unshift(o - i), n.unshift(s - e), e = s + n[n.length - 4], i = o + n[n.length - 3], s += n[n.length - 2], o += n[n.length - 1], "v" + n.join(","); case "S": return n.unshift(o + o - i), n.unshift(s + s - e), e = n[n.length - 4], i = n[n.length - 3], s = n[n.length - 2], o = n[n.length - 1], "c" + n.join(","); default: return !1 } return "" }).replace(/z/g, "") }; var WorldMap = function (t) { $("#wmap").append("<div class='MapLogo2'></div>"), t = t || {}; var e = this, i = WorldMap.maps[t.map]; this.selectedRegions = [], this.multiSelectRegion = t.multiSelectRegion, this.container = t.container, this.defaultWidth = i.width, this.defaultHeight = i.height, this.color = t.color, this.selectedColor = t.selectedColor, this.hoverColor = t.hoverColor, this.hoverOpacity = t.hoverOpacity, this.setBackgroundColor(t.backgroundColor), this.width = t.container.width(), this.height = t.container.height(), this.resize(), jQuery(window).resize(function () { e.width = t.container.width(), e.height = t.container.height(), e.resize(), e.canvas.setSize(e.width, e.height), e.applyTransform() }), this.canvas = new VectorCanvas(this.width, this.height, t), t.container.append(this.canvas.canvas), this.makeDraggable(), this.rootGroup = this.canvas.createGroup(!0), this.index = WorldMap.mapIndex, this.label = jQuery("<div/>").addClass("jqvmap-label").appendTo(jQuery("body")).hide(), t.enableZoom && (jQuery("<div/>").addClass("jqvmap-zoomin").text("+").appendTo(t.container), jQuery("<div/>").addClass("jqvmap-zoomout").html("&#x2212;").appendTo(t.container)), e.countries = []; for (var s in i.pathes) { var o = this.canvas.createPath({ path: i.pathes[s].path }); o.setFill(this.color), o.id = e.getCountryId(s), e.countries[s] = o, "svg" == this.canvas.mode ? o.setAttribute("class", "jvectormap-region") : jQuery(o).addClass("jvectormap-region"), jQuery(this.rootGroup).append(o) } if (jQuery(t.container).delegate("svg" == this.canvas.mode ? "path" : "shape", "mouseover mouseout", function (s) { var o = s.target, r = s.target.id.split("_").pop(), n = $.Event("labelShow.jqvmap"), a = $.Event("regionMouseOver.jqvmap"); "mouseover" == s.type ? r.indexOf("*") <= -1 && (jQuery(t.container).trigger(a, [r, i.pathes[r].name]), a.isDefaultPrevented() || e.highlight(r, o), t.showTooltip && (e.label.text(i.pathes[r].name), jQuery(t.container).trigger(n, [e.label, r]), n.isDefaultPrevented() || (e.label.show(), e.labelWidth = e.label.width(), e.labelHeight = e.label.height()))) : (e.unhighlight(r, o), e.label.hide(), jQuery(t.container).trigger("regionMouseOut.jqvmap", [r, i.pathes[r].name])) }), jQuery(t.container).delegate("svg" == this.canvas.mode ? "path" : "shape", "click", function (s) { if (!t.multiSelectRegion) for (var o in i.pathes) e.countries[o].currentFillColor = e.countries[o].getOriginalFill(), e.countries[o].setFill(e.countries[o].getOriginalFill()); var r = (s.target, s.target.id.split("_").pop()); jQuery(t.container).trigger("regionClick.jqvmap", [r, i.pathes[r].name]) }), t.showTooltip && t.container.mousemove(function (t) { if (e.label.is(":visible")) { var i = t.pageX - 15 - e.labelWidth, s = t.pageY - 15 - e.labelHeight; 0 > i && (i = t.pageX + 15), 0 > s && (s = t.pageY + 15), e.label.css({ left: i, top: s }) } }), this.setColors(t.colors), this.canvas.canvas.appendChild(this.rootGroup), this.applyTransform(), this.colorScale = new ColorScale(t.scaleColors, t.normalizeFunction, t.valueMin, t.valueMax), t.values && (this.values = t.values, this.setValues(t.values)), t.selectedRegions) if (t.selectedRegions instanceof Array) for (var r in t.selectedRegions) this.select(t.selectedRegions[r].toLowerCase()); else this.select(t.selectedRegions.toLowerCase()); this.bindZoomButtons(), t.pins && (this.pinHandlers = !1, this.placePins(t.pins, t.pinMode)), WorldMap.mapIndex++ }; WorldMap.prototype = { transX: 0, transY: 0, scale: 1, baseTransX: 0, baseTransY: 0, baseScale: 1, width: 0, height: 0, countries: {}, countriesColors: {}, countriesData: {}, zoomStep: 1.4, zoomMaxStep: 4, zoomCurStep: 1, setColors: function (t, e) { if ("string" == typeof t) this.countries[t].setFill(e), this.countries[t].setAttribute("original", e); else { var i = t; for (var s in i) this.countries[s] && (this.countries[s].setFill(i[s]), this.countries[s].setAttribute("original", i[s])) } }, setValues: function (t) { this.setColors(t), this.values = t }, setBackgroundColor: function (t) { this.container.css("background-color", t) }, setScaleColors: function (t) { this.colorScale.setColors(t), this.values && this.setValues(this.values) }, setNormalizeFunction: function (t) { this.colorScale.setNormalizeFunction(t), this.values && this.setValues(this.values) }, highlight: function (t, e) { e = e || $("#" + this.getCountryId(t))[0], this.hoverOpacity ? e.setOpacity(this.hoverOpacity) : this.hoverColor && (e.currentFillColor = e.getFill() + "", e.setFill(this.hoverColor)) }, unhighlight: function (t, e) { e = e || $("#" + this.getCountryId(t))[0], e.setOpacity(1), e.currentFillColor && e.setFill(e.currentFillColor) }, select: function (t, e, i) { e = e || $("#" + this.getCountryId(t))[0], this.selectedRegions.indexOf(t) < 0 && (this.multiSelectRegion ? this.selectedRegions.push(t) : this.selectedRegions = [t], $(this.container).trigger("regionSelect.jqvmap", [t], [i]), this.selectedColor && (e.currentFillColor = this.selectedColor, e.setFill(this.selectedColor))) }, deselect: function (t, e) { e = e || $("#" + this.getCountryId(t))[0], this.selectedRegions.indexOf(t) >= 0 && (this.selectedRegions.splice(this.selectedRegions.indexOf(t), 1), $(this.container).trigger("regionDeselect.jqvmap", [t]), e.currentFillColor = e.getOriginalFill(), e.setFill(e.getOriginalFill())) }, isSelected: function (t) { return this.selectedRegions.indexOf(t) >= 0 }, resize: function () { var t = this.baseScale; this.width / this.height > this.defaultWidth / this.defaultHeight ? (this.baseScale = this.height / this.defaultHeight, this.baseTransX = Math.abs(this.width - this.defaultWidth * this.baseScale) / (2 * this.baseScale)) : (this.baseScale = this.width / this.defaultWidth, this.baseTransY = Math.abs(this.height - this.defaultHeight * this.baseScale) / (2 * this.baseScale)), this.scale *= this.baseScale / t, this.transX *= this.baseScale / t, this.transY *= this.baseScale / t }, reset: function () { this.countryTitle.reset(); for (var t in this.countries) this.countries[t].setFill(WorldMap.defaultColor); this.scale = this.baseScale, this.transX = this.baseTransX, this.transY = this.baseTransY, this.applyTransform() }, applyTransform: function () { var t, e, i, s; this.defaultWidth * this.scale <= this.width ? (t = (this.width - this.defaultWidth * this.scale) / (2 * this.scale), i = (this.width - this.defaultWidth * this.scale) / (2 * this.scale)) : (t = 0, i = (this.width - this.defaultWidth * this.scale) / this.scale), this.defaultHeight * this.scale <= this.height ? (e = (this.height - this.defaultHeight * this.scale) / (2 * this.scale), s = (this.height - this.defaultHeight * this.scale) / (2 * this.scale)) : (e = 0, s = (this.height - this.defaultHeight * this.scale) / this.scale), this.transY > e ? this.transY = e : this.transY < s && (this.transY = s), this.transX > t ? this.transX = t : this.transX < i && (this.transX = i), this.canvas.applyTransformParams(this.scale, this.transX, this.transY) }, makeDraggable: function () { var t, e, i = !1, s = this; s.isMoving = !1, s.isMovingTimeout = !1, this.container.mousemove(function (o) { if (i) { { s.transX, s.transY } s.transX -= (t - o.pageX) / s.scale, s.transY -= (e - o.pageY) / s.scale, s.applyTransform(), t = o.pageX, e = o.pageY, s.isMoving = !0, s.isMovingTimeout && clearTimeout(s.isMovingTimeout), s.container.trigger("drag") } return !1 }).mousedown(function (s) { return i = !0, t = s.pageX, e = s.pageY, !1 }).mouseup(function () { return i = !1, s.isMovingTimeout = setTimeout(function () { s.isMoving = !1 }, 100), !1 }) }, bindZoomButtons: function () { var t = this; this.container.find(".jqvmap-zoomin").click(function () { t.zoomIn() }), this.container.find(".jqvmap-zoomout").click(function () { t.zoomOut() }) }, zoomIn: function () { var t = this, e = (jQuery("#zoom").innerHeight() - 12 - 30 - 6 - 7 - 6) / (this.zoomMaxStep - this.zoomCurStep); if (t.zoomCurStep < t.zoomMaxStep) { { t.transX, t.transY, t.scale } t.transX -= (t.width / t.scale - t.width / (t.scale * t.zoomStep)) / 2, t.transY -= (t.height / t.scale - t.height / (t.scale * t.zoomStep)) / 2, t.setScale(t.scale * t.zoomStep), t.zoomCurStep++, jQuery("#zoomSlider").css("top", parseInt(jQuery("#zoomSlider").css("top"), 10) - e), t.container.trigger("zoomIn") } }, zoomOut: function () { var t = this, e = (jQuery("#zoom").innerHeight() - 12 - 30 - 6 - 7 - 6) / (this.zoomMaxStep - this.zoomCurStep); if (t.zoomCurStep > 1) { { t.transX, t.transY, t.scale } t.transX += (t.width / (t.scale / t.zoomStep) - t.width / t.scale) / 2, t.transY += (t.height / (t.scale / t.zoomStep) - t.height / t.scale) / 2, t.setScale(t.scale / t.zoomStep), t.zoomCurStep--, jQuery("#zoomSlider").css("top", parseInt(jQuery("#zoomSlider").css("top"), 10) + e), t.container.trigger("zoomOut") } }, setScale: function (t) { this.scale = t, this.applyTransform() }, getCountryId: function (t) { return "jqvmap" + this.index + "_" + t }, getPinId: function (t) { return this.getCountryId(t) + "_pin" }, placePins: function (t, e) { var i = this; if ((!e || "content" != e && "id" != e) && (e = "content"), "content" == e ? jQuery.each(t, function (t, e) { if (0 != jQuery("#" + i.getCountryId(t)).length) { var s = i.getPinId(t); jQuery("#" + s).length > 0 && jQuery("#" + s).remove(), i.container.append('<div id="' + s + '" for="' + t + '" class="jqvmap_pin" style="position:absolute">' + e + "</div>") } }) : jQuery.each(t, function (t, e) { if (0 != jQuery("#" + i.getCountryId(t)).length) { var s = i.getPinId(t); jQuery("#" + s).length > 0 && jQuery("#" + s).remove(), i.container.append('<div id="' + s + '" for="' + t + '" class="jqvmap_pin" style="position:absolute"></div>'), jQuery("#" + s).append(jQuery("#" + e)) } }), this.positionPins(), !this.pinHandlers) { this.pinHandlers = !0; var s = function () { i.positionPins() }; this.container.bind("zoomIn", s).bind("zoomOut", s).bind("drag", s) } }, positionPins: function () { var t = this, e = this.container.find(".jqvmap_pin"); jQuery.each(e, function (e, i) { i = jQuery(i); var s = t.getCountryId(i.attr("for")), o = jQuery("#" + s), r = document.getElementById(s).getBBox(), n = o.position(), a = t.scale, l = n.left + r.width / 2 * a - i.width() / 2, h = n.top + r.height / 2 * a - i.height() / 2; i.css("left", l).css("top", h) }) }, getPin: function (t) { var e = jQuery("#" + this.getPinId(t)); return e.html() }, getPins: function () { var pins = this.container.find(".jqvmap_pin"), ret = new Object; return jQuery.each(pins, function (index, pinObj) { pinObj = jQuery(pinObj); var cc = pinObj.attr("for"), pinContent = pinObj.html(); eval("ret." + cc + "=pinContent") }), JSON.stringify(ret) }, removePin: function (t) { jQuery("#" + this.getPinId(t)).remove() }, removePins: function () { this.container.find(".jqvmap_pin").remove() } }, WorldMap.xlink = "http://www.w3.org/1999/xlink", WorldMap.mapIndex = 1, WorldMap.maps = {}; var ColorScale = function (t, e, i, s) { t && this.setColors(t), e && this.setNormalizeFunction(e), i && this.setMin(i), i && this.setMax(s) }; ColorScale.prototype = { colors: [], setMin: function (t) { this.clearMinValue = t, this.minValue = "function" == typeof this.normalize ? this.normalize(t) : t }, setMax: function (t) { this.clearMaxValue = t, this.maxValue = "function" == typeof this.normalize ? this.normalize(t) : t }, setColors: function (t) { for (var e = 0; e < t.length; e++) t[e] = ColorScale.rgbToArray(t[e]); this.colors = t }, setNormalizeFunction: function (t) { "polynomial" === t ? this.normalize = function (t) { return Math.pow(t, .2) } : "linear" === t ? delete this.normalize : this.normalize = t, this.setMin(this.clearMinValue), this.setMax(this.clearMaxValue) }, getColor: function (t) { "function" == typeof this.normalize && (t = this.normalize(t)); for (var e, i = [], s = 0, o = 0; o < this.colors.length - 1; o++) e = this.vectorLength(this.vectorSubtract(this.colors[o + 1], this.colors[o])), i.push(e), s += e; var r = (this.maxValue - this.minValue) / s; for (o = 0; o < i.length; o++) i[o] *= r; for (o = 0, t -= this.minValue; t - i[o] >= 0;) t -= i[o], o++; var n; for (n = o == this.colors.length - 1 ? this.vectorToNum(this.colors[o]).toString(16) : this.vectorToNum(this.vectorAdd(this.colors[o], this.vectorMult(this.vectorSubtract(this.colors[o + 1], this.colors[o]), t / i[o]))).toString(16) ; n.length < 6;) n = "0" + n; return "#" + n }, vectorToNum: function (t) { for (var e = 0, i = 0; i < t.length; i++) e += Math.round(t[i]) * Math.pow(256, t.length - i - 1); return e }, vectorSubtract: function (t, e) { for (var i = [], s = 0; s < t.length; s++) i[s] = t[s] - e[s]; return i }, vectorAdd: function (t, e) { for (var i = [], s = 0; s < t.length; s++) i[s] = t[s] + e[s]; return i }, vectorMult: function (t, e) { for (var i = [], s = 0; s < t.length; s++) i[s] = t[s] * e; return i }, vectorLength: function (t) { for (var e = 0, i = 0; i < t.length; i++) e += t[i] * t[i]; return Math.sqrt(e) } }, ColorScale.arrayToRgb = function (t) { for (var e, i = "#", s = 0; s < t.length; s++) e = t[s].toString(16), i += 1 == e.length ? "0" + e : e; return i }, ColorScale.rgbToArray = function (t) { return t = t.substr(1), [parseInt(t.substr(0, 2), 16), parseInt(t.substr(2, 2), 16), parseInt(t.substr(4, 2), 16)] } }(jQuery);